// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MAP_OBJECTS_HXX
#define MAP_OBJECTS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class c_mapObjects;
class c_buildings;
class c_decorations;
class c_units;
class c_building;
class c_settlement;
class c_decoration;
class c_unit;
class c_building1;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class c_mapObjects: public ::xml_schema::type
{
  public:
  // c_buildings
  //
  typedef ::c_buildings c_buildings_type;
  typedef ::xsd::cxx::tree::traits< c_buildings_type, char > c_buildings_traits;

  const c_buildings_type&
  c_buildings () const;

  c_buildings_type&
  c_buildings ();

  void
  c_buildings (const c_buildings_type& x);

  void
  c_buildings (::std::auto_ptr< c_buildings_type > p);

  // c_decorations
  //
  typedef ::c_decorations c_decorations_type;
  typedef ::xsd::cxx::tree::traits< c_decorations_type, char > c_decorations_traits;

  const c_decorations_type&
  c_decorations () const;

  c_decorations_type&
  c_decorations ();

  void
  c_decorations (const c_decorations_type& x);

  void
  c_decorations (::std::auto_ptr< c_decorations_type > p);

  // c_units
  //
  typedef ::c_units c_units_type;
  typedef ::xsd::cxx::tree::traits< c_units_type, char > c_units_traits;

  const c_units_type&
  c_units () const;

  c_units_type&
  c_units ();

  void
  c_units (const c_units_type& x);

  void
  c_units (::std::auto_ptr< c_units_type > p);

  // Constructors.
  //
  c_mapObjects (const c_buildings_type&,
                const c_decorations_type&,
                const c_units_type&);

  c_mapObjects (::std::auto_ptr< c_buildings_type >,
                ::std::auto_ptr< c_decorations_type >,
                ::std::auto_ptr< c_units_type >);

  c_mapObjects (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  c_mapObjects (const c_mapObjects& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual c_mapObjects*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_mapObjects&
  operator= (const c_mapObjects& x);

  virtual 
  ~c_mapObjects ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< c_buildings_type > c_buildings_;
  ::xsd::cxx::tree::one< c_decorations_type > c_decorations_;
  ::xsd::cxx::tree::one< c_units_type > c_units_;
};

class c_buildings: public ::xml_schema::type
{
  public:
  // c_building
  //
  typedef ::c_building c_building_type;
  typedef ::xsd::cxx::tree::sequence< c_building_type > c_building_sequence;
  typedef c_building_sequence::iterator c_building_iterator;
  typedef c_building_sequence::const_iterator c_building_const_iterator;
  typedef ::xsd::cxx::tree::traits< c_building_type, char > c_building_traits;

  const c_building_sequence&
  c_building () const;

  c_building_sequence&
  c_building ();

  void
  c_building (const c_building_sequence& s);

  // c_settlement
  //
  typedef ::c_settlement c_settlement_type;
  typedef ::xsd::cxx::tree::sequence< c_settlement_type > c_settlement_sequence;
  typedef c_settlement_sequence::iterator c_settlement_iterator;
  typedef c_settlement_sequence::const_iterator c_settlement_const_iterator;
  typedef ::xsd::cxx::tree::traits< c_settlement_type, char > c_settlement_traits;

  const c_settlement_sequence&
  c_settlement () const;

  c_settlement_sequence&
  c_settlement ();

  void
  c_settlement (const c_settlement_sequence& s);

  // Constructors.
  //
  c_buildings ();

  c_buildings (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  c_buildings (const c_buildings& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual c_buildings*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_buildings&
  operator= (const c_buildings& x);

  virtual 
  ~c_buildings ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  c_building_sequence c_building_;
  c_settlement_sequence c_settlement_;
};

class c_decorations: public ::xml_schema::type
{
  public:
  // c_decoration
  //
  typedef ::c_decoration c_decoration_type;
  typedef ::xsd::cxx::tree::sequence< c_decoration_type > c_decoration_sequence;
  typedef c_decoration_sequence::iterator c_decoration_iterator;
  typedef c_decoration_sequence::const_iterator c_decoration_const_iterator;
  typedef ::xsd::cxx::tree::traits< c_decoration_type, char > c_decoration_traits;

  const c_decoration_sequence&
  c_decoration () const;

  c_decoration_sequence&
  c_decoration ();

  void
  c_decoration (const c_decoration_sequence& s);

  // Constructors.
  //
  c_decorations ();

  c_decorations (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  c_decorations (const c_decorations& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual c_decorations*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_decorations&
  operator= (const c_decorations& x);

  virtual 
  ~c_decorations ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  c_decoration_sequence c_decoration_;
};

class c_units: public ::xml_schema::type
{
  public:
  // c_unit
  //
  typedef ::c_unit c_unit_type;
  typedef ::xsd::cxx::tree::sequence< c_unit_type > c_unit_sequence;
  typedef c_unit_sequence::iterator c_unit_iterator;
  typedef c_unit_sequence::const_iterator c_unit_const_iterator;
  typedef ::xsd::cxx::tree::traits< c_unit_type, char > c_unit_traits;

  const c_unit_sequence&
  c_unit () const;

  c_unit_sequence&
  c_unit ();

  void
  c_unit (const c_unit_sequence& s);

  // Constructors.
  //
  c_units ();

  c_units (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  c_units (const c_units& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual c_units*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_units&
  operator= (const c_units& x);

  virtual 
  ~c_units ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  c_unit_sequence c_unit_;
};

class c_building: public ::xml_schema::type
{
  public:
  // class
  //
  typedef ::xml_schema::string class_type;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_type&
  class_ () const;

  class_type&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // id
  //
  typedef ::xml_schema::integer id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // healthperc
  //
  typedef ::xml_schema::integer healthperc_type;
  typedef ::xsd::cxx::tree::optional< healthperc_type > healthperc_optional;
  typedef ::xsd::cxx::tree::traits< healthperc_type, char > healthperc_traits;

  const healthperc_optional&
  healthperc () const;

  healthperc_optional&
  healthperc ();

  void
  healthperc (const healthperc_type& x);

  void
  healthperc (const healthperc_optional& x);

  // player
  //
  typedef ::xml_schema::integer player_type;
  typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

  const player_type&
  player () const;

  player_type&
  player ();

  void
  player (const player_type& x);

  // x
  //
  typedef ::xml_schema::integer x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::integer y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // icon
  //
  typedef ::xml_schema::string icon_type;
  typedef ::xsd::cxx::tree::optional< icon_type > icon_optional;
  typedef ::xsd::cxx::tree::traits< icon_type, char > icon_traits;

  const icon_optional&
  icon () const;

  icon_optional&
  icon ();

  void
  icon (const icon_type& x);

  void
  icon (const icon_optional& x);

  void
  icon (::std::auto_ptr< icon_type > p);

  // gold
  //
  typedef ::xml_schema::integer gold_type;
  typedef ::xsd::cxx::tree::traits< gold_type, char > gold_traits;

  const gold_type&
  gold () const;

  gold_type&
  gold ();

  void
  gold (const gold_type& x);

  // food
  //
  typedef ::xml_schema::integer food_type;
  typedef ::xsd::cxx::tree::traits< food_type, char > food_traits;

  const food_type&
  food () const;

  food_type&
  food ();

  void
  food (const food_type& x);

  // Constructors.
  //
  c_building (const class_type&,
              const id_type&,
              const player_type&,
              const x_type&,
              const y_type&,
              const gold_type&,
              const food_type&);

  c_building (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  c_building (const c_building& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual c_building*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_building&
  operator= (const c_building& x);

  virtual 
  ~c_building ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< class_type > class__;
  ::xsd::cxx::tree::one< id_type > id_;
  healthperc_optional healthperc_;
  ::xsd::cxx::tree::one< player_type > player_;
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  name_optional name_;
  icon_optional icon_;
  ::xsd::cxx::tree::one< gold_type > gold_;
  ::xsd::cxx::tree::one< food_type > food_;
};

class c_settlement: public ::xml_schema::type
{
  public:
  // c_building
  //
  typedef ::c_building1 c_building_type;
  typedef ::xsd::cxx::tree::sequence< c_building_type > c_building_sequence;
  typedef c_building_sequence::iterator c_building_iterator;
  typedef c_building_sequence::const_iterator c_building_const_iterator;
  typedef ::xsd::cxx::tree::traits< c_building_type, char > c_building_traits;

  const c_building_sequence&
  c_building () const;

  c_building_sequence&
  c_building ();

  void
  c_building (const c_building_sequence& s);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // player
  //
  typedef ::xml_schema::integer player_type;
  typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

  const player_type&
  player () const;

  player_type&
  player ();

  void
  player (const player_type& x);

  // x
  //
  typedef ::xml_schema::integer x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::integer y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // gold
  //
  typedef ::xml_schema::integer gold_type;
  typedef ::xsd::cxx::tree::optional< gold_type > gold_optional;
  typedef ::xsd::cxx::tree::traits< gold_type, char > gold_traits;

  const gold_optional&
  gold () const;

  gold_optional&
  gold ();

  void
  gold (const gold_type& x);

  void
  gold (const gold_optional& x);

  // food
  //
  typedef ::xml_schema::integer food_type;
  typedef ::xsd::cxx::tree::optional< food_type > food_optional;
  typedef ::xsd::cxx::tree::traits< food_type, char > food_traits;

  const food_optional&
  food () const;

  food_optional&
  food ();

  void
  food (const food_type& x);

  void
  food (const food_optional& x);

  // population
  //
  typedef ::xml_schema::integer population_type;
  typedef ::xsd::cxx::tree::optional< population_type > population_optional;
  typedef ::xsd::cxx::tree::traits< population_type, char > population_traits;

  const population_optional&
  population () const;

  population_optional&
  population ();

  void
  population (const population_type& x);

  void
  population (const population_optional& x);

  // maxpopulation
  //
  typedef ::xml_schema::integer maxpopulation_type;
  typedef ::xsd::cxx::tree::optional< maxpopulation_type > maxpopulation_optional;
  typedef ::xsd::cxx::tree::traits< maxpopulation_type, char > maxpopulation_traits;

  const maxpopulation_optional&
  maxpopulation () const;

  maxpopulation_optional&
  maxpopulation ();

  void
  maxpopulation (const maxpopulation_type& x);

  void
  maxpopulation (const maxpopulation_optional& x);

  // Constructors.
  //
  c_settlement (const name_type&,
                const player_type&,
                const x_type&,
                const y_type&);

  c_settlement (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  c_settlement (const c_settlement& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual c_settlement*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_settlement&
  operator= (const c_settlement& x);

  virtual 
  ~c_settlement ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  c_building_sequence c_building_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< player_type > player_;
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  gold_optional gold_;
  food_optional food_;
  population_optional population_;
  maxpopulation_optional maxpopulation_;
};

class c_decoration: public ::xml_schema::type
{
  public:
  // class
  //
  typedef ::xml_schema::string class_type;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_type&
  class_ () const;

  class_type&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // id
  //
  typedef ::xml_schema::integer id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // x
  //
  typedef ::xml_schema::integer x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::integer y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // xOffset
  //
  typedef ::xml_schema::integer xOffset_type;
  typedef ::xsd::cxx::tree::optional< xOffset_type > xOffset_optional;
  typedef ::xsd::cxx::tree::traits< xOffset_type, char > xOffset_traits;

  const xOffset_optional&
  xOffset () const;

  xOffset_optional&
  xOffset ();

  void
  xOffset (const xOffset_type& x);

  void
  xOffset (const xOffset_optional& x);

  // yOffset
  //
  typedef ::xml_schema::integer yOffset_type;
  typedef ::xsd::cxx::tree::optional< yOffset_type > yOffset_optional;
  typedef ::xsd::cxx::tree::traits< yOffset_type, char > yOffset_traits;

  const yOffset_optional&
  yOffset () const;

  yOffset_optional&
  yOffset ();

  void
  yOffset (const yOffset_type& x);

  void
  yOffset (const yOffset_optional& x);

  // settlementName
  //
  typedef ::xml_schema::string settlementName_type;
  typedef ::xsd::cxx::tree::optional< settlementName_type > settlementName_optional;
  typedef ::xsd::cxx::tree::traits< settlementName_type, char > settlementName_traits;

  const settlementName_optional&
  settlementName () const;

  settlementName_optional&
  settlementName ();

  void
  settlementName (const settlementName_type& x);

  void
  settlementName (const settlementName_optional& x);

  void
  settlementName (::std::auto_ptr< settlementName_type > p);

  // Constructors.
  //
  c_decoration (const class_type&,
                const id_type&,
                const x_type&,
                const y_type&);

  c_decoration (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  c_decoration (const c_decoration& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual c_decoration*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_decoration&
  operator= (const c_decoration& x);

  virtual 
  ~c_decoration ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< class_type > class__;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  xOffset_optional xOffset_;
  yOffset_optional yOffset_;
  settlementName_optional settlementName_;
};

class c_unit: public ::xml_schema::type
{
  public:
  // class
  //
  typedef ::xml_schema::string class_type;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_type&
  class_ () const;

  class_type&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // id
  //
  typedef ::xml_schema::integer id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // x
  //
  typedef ::xml_schema::integer x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::integer y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // direction
  //
  typedef ::xml_schema::integer direction_type;
  typedef ::xsd::cxx::tree::optional< direction_type > direction_optional;
  typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

  const direction_optional&
  direction () const;

  direction_optional&
  direction ();

  void
  direction (const direction_type& x);

  void
  direction (const direction_optional& x);

  // level
  //
  typedef ::xml_schema::integer level_type;
  typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

  const level_type&
  level () const;

  level_type&
  level ();

  void
  level (const level_type& x);

  // invisible
  //
  typedef ::xml_schema::boolean invisible_type;
  typedef ::xsd::cxx::tree::optional< invisible_type > invisible_optional;
  typedef ::xsd::cxx::tree::traits< invisible_type, char > invisible_traits;

  const invisible_optional&
  invisible () const;

  invisible_optional&
  invisible ();

  void
  invisible (const invisible_type& x);

  void
  invisible (const invisible_optional& x);

  // messenger_status
  //
  typedef ::xml_schema::boolean messenger_status_type;
  typedef ::xsd::cxx::tree::optional< messenger_status_type > messenger_status_optional;
  typedef ::xsd::cxx::tree::traits< messenger_status_type, char > messenger_status_traits;

  const messenger_status_optional&
  messenger_status () const;

  messenger_status_optional&
  messenger_status ();

  void
  messenger_status (const messenger_status_type& x);

  void
  messenger_status (const messenger_status_optional& x);

  // feeds
  //
  typedef ::xml_schema::boolean feeds_type;
  typedef ::xsd::cxx::tree::optional< feeds_type > feeds_optional;
  typedef ::xsd::cxx::tree::traits< feeds_type, char > feeds_traits;

  const feeds_optional&
  feeds () const;

  feeds_optional&
  feeds ();

  void
  feeds (const feeds_type& x);

  void
  feeds (const feeds_optional& x);

  // party
  //
  typedef ::xml_schema::boolean party_type;
  typedef ::xsd::cxx::tree::optional< party_type > party_optional;
  typedef ::xsd::cxx::tree::traits< party_type, char > party_traits;

  const party_optional&
  party () const;

  party_optional&
  party ();

  void
  party (const party_type& x);

  void
  party (const party_optional& x);

  // ai_ctrl
  //
  typedef ::xml_schema::boolean ai_ctrl_type;
  typedef ::xsd::cxx::tree::optional< ai_ctrl_type > ai_ctrl_optional;
  typedef ::xsd::cxx::tree::traits< ai_ctrl_type, char > ai_ctrl_traits;

  const ai_ctrl_optional&
  ai_ctrl () const;

  ai_ctrl_optional&
  ai_ctrl ();

  void
  ai_ctrl (const ai_ctrl_type& x);

  void
  ai_ctrl (const ai_ctrl_optional& x);

  // healthperc
  //
  typedef ::xml_schema::integer healthperc_type;
  typedef ::xsd::cxx::tree::optional< healthperc_type > healthperc_optional;
  typedef ::xsd::cxx::tree::traits< healthperc_type, char > healthperc_traits;

  const healthperc_optional&
  healthperc () const;

  healthperc_optional&
  healthperc ();

  void
  healthperc (const healthperc_type& x);

  void
  healthperc (const healthperc_optional& x);

  // stamina
  //
  typedef ::xml_schema::integer stamina_type;
  typedef ::xsd::cxx::tree::optional< stamina_type > stamina_optional;
  typedef ::xsd::cxx::tree::traits< stamina_type, char > stamina_traits;

  const stamina_optional&
  stamina () const;

  stamina_optional&
  stamina ();

  void
  stamina (const stamina_type& x);

  void
  stamina (const stamina_optional& x);

  // inventary
  //
  typedef ::xml_schema::string inventary_type;
  typedef ::xsd::cxx::tree::optional< inventary_type > inventary_optional;
  typedef ::xsd::cxx::tree::traits< inventary_type, char > inventary_traits;

  const inventary_optional&
  inventary () const;

  inventary_optional&
  inventary ();

  void
  inventary (const inventary_type& x);

  void
  inventary (const inventary_optional& x);

  void
  inventary (::std::auto_ptr< inventary_type > p);

  // Constructors.
  //
  c_unit (const class_type&,
          const id_type&,
          const x_type&,
          const y_type&,
          const level_type&);

  c_unit (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  c_unit (const c_unit& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual c_unit*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_unit&
  operator= (const c_unit& x);

  virtual 
  ~c_unit ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< class_type > class__;
  name_optional name_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  direction_optional direction_;
  ::xsd::cxx::tree::one< level_type > level_;
  invisible_optional invisible_;
  messenger_status_optional messenger_status_;
  feeds_optional feeds_;
  party_optional party_;
  ai_ctrl_optional ai_ctrl_;
  healthperc_optional healthperc_;
  stamina_optional stamina_;
  inventary_optional inventary_;
};

class c_building1: public ::xml_schema::type
{
  public:
  // class
  //
  typedef ::xml_schema::string class_type;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_type&
  class_ () const;

  class_type&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // id
  //
  typedef ::xml_schema::integer id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // healthperc
  //
  typedef ::xml_schema::integer healthperc_type;
  typedef ::xsd::cxx::tree::optional< healthperc_type > healthperc_optional;
  typedef ::xsd::cxx::tree::traits< healthperc_type, char > healthperc_traits;

  const healthperc_optional&
  healthperc () const;

  healthperc_optional&
  healthperc ();

  void
  healthperc (const healthperc_type& x);

  void
  healthperc (const healthperc_optional& x);

  // xOffset
  //
  typedef ::xml_schema::integer xOffset_type;
  typedef ::xsd::cxx::tree::traits< xOffset_type, char > xOffset_traits;

  const xOffset_type&
  xOffset () const;

  xOffset_type&
  xOffset ();

  void
  xOffset (const xOffset_type& x);

  // yOffset
  //
  typedef ::xml_schema::integer yOffset_type;
  typedef ::xsd::cxx::tree::traits< yOffset_type, char > yOffset_traits;

  const yOffset_type&
  yOffset () const;

  yOffset_type&
  yOffset ();

  void
  yOffset (const yOffset_type& x);

  // icon
  //
  typedef ::xml_schema::string icon_type;
  typedef ::xsd::cxx::tree::optional< icon_type > icon_optional;
  typedef ::xsd::cxx::tree::traits< icon_type, char > icon_traits;

  const icon_optional&
  icon () const;

  icon_optional&
  icon ();

  void
  icon (const icon_type& x);

  void
  icon (const icon_optional& x);

  void
  icon (::std::auto_ptr< icon_type > p);

  // Constructors.
  //
  c_building1 (const class_type&,
               const id_type&,
               const xOffset_type&,
               const yOffset_type&);

  c_building1 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  c_building1 (const c_building1& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual c_building1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  c_building1&
  operator= (const c_building1& x);

  virtual 
  ~c_building1 ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< class_type > class__;
  ::xsd::cxx::tree::one< id_type > id_;
  healthperc_optional healthperc_;
  ::xsd::cxx::tree::one< xOffset_type > xOffset_;
  ::xsd::cxx::tree::one< yOffset_type > yOffset_;
  icon_optional icon_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
c_mapObjects_ (::std::ostream& os,
               const ::c_mapObjects& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
c_mapObjects_ (::std::ostream& os,
               const ::c_mapObjects& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
c_mapObjects_ (::std::ostream& os,
               const ::c_mapObjects& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
c_mapObjects_ (::xercesc::XMLFormatTarget& ft,
               const ::c_mapObjects& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
c_mapObjects_ (::xercesc::XMLFormatTarget& ft,
               const ::c_mapObjects& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
c_mapObjects_ (::xercesc::XMLFormatTarget& ft,
               const ::c_mapObjects& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
c_mapObjects_ (::xercesc::DOMDocument& d,
               const ::c_mapObjects& x,
               ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
c_mapObjects_ (const ::c_mapObjects& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const c_mapObjects&);

void
operator<< (::xercesc::DOMElement&, const c_buildings&);

void
operator<< (::xercesc::DOMElement&, const c_decorations&);

void
operator<< (::xercesc::DOMElement&, const c_units&);

void
operator<< (::xercesc::DOMElement&, const c_building&);

void
operator<< (::xercesc::DOMElement&, const c_settlement&);

void
operator<< (::xercesc::DOMElement&, const c_decoration&);

void
operator<< (::xercesc::DOMElement&, const c_unit&);

void
operator<< (::xercesc::DOMElement&, const c_building1&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MAP_OBJECTS_HXX
