###############################################################################################
# Copyright (c) 2001-2020 Liquid Technologies Limited. All rights reserved.
# See www.liquid-technologies.com for product details.
#
# Please see products End User License Agreement for distribution permissions.
#
# WARNING: THIS FILE IS GENERATED
# Changes made outside of ##HAND_CODED_BLOCK_START blocks will be overwritten
#
# Generation  :  by Liquid XML Data Binder 18.0.2.9849
# Using Schema: C:\Users\utente\source\repos\centurion\centurion-source\Params.xsd
###############################################################################################

#			Makefile
# For Sample App - which test ParamsLib 
LT_VERSION=18

# use g++ compiler
CPP=g++
LNK=g++

# compiler options for release build
RELEASE_CPP=-D_UNIX_ -D_LINUX_ -c -m64 -O2

# compiler options for debug build
DEBUG_CPP=-D_UNIX_ -D_DEBUG -D_LINUX_ -ggdb -c -m64

# compiler options for release build
RELEASE_UNICODE_CPP=-D_UNIX_ -D_LINUX_ -DUNICODE -D_UNICODE -c -m64 -fPIC -O2

# compiler options for debug build
DEBUG_UNICODE_CPP=-D_UNIX_ -D_DEBUG -D_LINUX_ -DUNICODE -D_UNICODE -ggdb -c -m64

# compiler include dirs
CPP_INCLUDES=-I../Bin/Redist$(LT_VERSION)/cpp/include -I../ -I../ParamsLib

# libraries to include
RELEASE_LIBS=-lParamsLib -lLtXml$(LT_VERSION)
DEBUG_LIBS=-lParamsLibD -lLtXml$(LT_VERSION)D
RELEASE_UNICODE_LIBS=-lParamsLibU -lLtXml$(LT_VERSION)U
DEBUG_UNICODE_LIBS=-lParamsLibDU -lLtXml$(LT_VERSION)DU

# target name 
RELEASE_TARGET=SampleApp
DEBUG_TARGET=SampleAppD
RELEASE_UNICODE_TARGET=SampleAppU
DEBUG_UNICODE_TARGET=SampleAppDU

# path to output binaries
RELEASE_TARGET_PATH=release
DEBUG_TARGET_PATH=debug
RELEASE_UNICODE_TARGET_PATH=releaseUnicode
DEBUG_UNICODE_TARGET_PATH=debugUnicode

# external libs path
RELEASE_LIB_PATH=-L../release -L../../Bin/Redist$(LT_VERSION)/cpp/linux/bin
DEBUG_LIB_PATH=-L../debug -L../../Bin/Redist$(LT_VERSION)/cpp/linux/bin
RELEASE_UNICODE_LIB_PATH=-L../releaseUnicode -L../../Bin/Redist$(LT_VERSION)/cpp/linux/bin
DEBUG_UNICODE_LIB_PATH=-L../debugUnicode -L../../Bin/Redist$(LT_VERSION)/cpp/linux/bin

# path to object files
RELEASE_OBJ_PATH=release
DEBUG_OBJ_PATH=debug
RELEASE_UNICODE_OBJ_PATH=releaseUnicode
DEBUG_UNICODE_OBJ_PATH=debugUnicode

# c++ files
CPPS=SampleApp.cpp


############################################################################

# Main Target, build release & debug
all: release debug releaseUnicode debugUnicode

# build the release version
release: release_paths $(RELEASE_TARGET_PATH)/$(RELEASE_TARGET)

# build the debug version
debug: debug_paths $(DEBUG_TARGET_PATH)/$(DEBUG_TARGET)

# build the release unicode version
releaseUnicode: releaseUnicode_paths $(RELEASE_UNICODE_TARGET_PATH)/$(RELEASE_UNICODE_TARGET)

# build the debug unicode version
debugUnicode: debugUnicode_paths $(DEBUG_UNICODE_TARGET_PATH)/$(DEBUG_UNICODE_TARGET)


############################################################################
#
# SHARED OBJECT RELEASE BUILD
#
############################################################################

# release object files
RELEASE_OBJS=$(RELEASE_OBJ_PATH)/SampleApp.o

# build the release shared library
$(RELEASE_TARGET_PATH)/$(RELEASE_TARGET): $(RELEASE_OBJS) 
	$(LNK) -o$(RELEASE_TARGET_PATH)/$(RELEASE_TARGET) $(RELEASE_OBJS) $(RELEASE_LIB_PATH) $(RELEASE_LIBS)

# compile release c++ files
$(RELEASE_OBJ_PATH)/SampleApp.o: SampleApp.cpp
	$(CPP) $(RELEASE_CPP) $(CPP_INCLUDES) SampleApp.cpp -o $(RELEASE_OBJ_PATH)/SampleApp.o


############################################################################
#
# SHARED OBJECT DEBUG BUILD
#
############################################################################

# debug object files
DEBUG_OBJS=$(DEBUG_OBJ_PATH)/SampleApp.o

# build the debug shared library
$(DEBUG_TARGET_PATH)/$(DEBUG_TARGET): $(DEBUG_OBJS) 
	$(LNK) -o$(DEBUG_TARGET_PATH)/$(DEBUG_TARGET) $(DEBUG_OBJS) $(DEBUG_LIB_PATH) $(DEBUG_LIBS)

# compile debug c++ files
$(DEBUG_OBJ_PATH)/SampleApp.o: SampleApp.cpp
	$(CPP) $(DEBUG_CPP) $(CPP_INCLUDES) SampleApp.cpp -o $(DEBUG_OBJ_PATH)/SampleApp.o

############################################################################
#
# SHARED OBJECT RELEASE UNICODE BUILD
#
############################################################################

# release unicode object files
RELEASE_UNICODE_OBJS=$(RELEASE_UNICODE_OBJ_PATH)/SampleApp.o

# build the release unicode shared library
$(RELEASE_UNICODE_TARGET_PATH)/$(RELEASE_UNICODE_TARGET): $(RELEASE_UNICODE_OBJS) 
	$(LNK) -o$(RELEASE_UNICODE_TARGET_PATH)/$(RELEASE_UNICODE_TARGET) $(RELEASE_UNICODE_OBJS) $(RELEASE_UNICODE_LIB_PATH) $(RELEASE_UNICODE_LIBS)

# compile release unicode c++ files
$(RELEASE_UNICODE_OBJ_PATH)/SampleApp.o: SampleApp.cpp
	$(CPP) $(RELEASE_UNICODE_CPP) $(CPP_INCLUDES) SampleApp.cpp -o $(RELEASE_UNICODE_OBJ_PATH)/SampleApp.o


############################################################################
#
# SHARED OBJECT DEBUG UNICODE BUILD
#
############################################################################

# debug unicode object files
DEBUG_UNICODE_OBJS=$(DEBUG_UNICODE_OBJ_PATH)/SampleApp.o

# build the debug unicode shared library
$(DEBUG_UNICODE_TARGET_PATH)/$(DEBUG_UNICODE_TARGET): $(DEBUG_UNICODE_OBJS) 
	$(LNK) -o$(DEBUG_UNICODE_TARGET_PATH)/$(DEBUG_UNICODE_TARGET) $(DEBUG_UNICODE_OBJS) $(DEBUG_UNICODE_LIB_PATH) $(DEBUG_UNICODE_LIBS)

# compile debug unicode c++ files
$(DEBUG_UNICODE_OBJ_PATH)/SampleApp.o: SampleApp.cpp
	$(CPP) $(DEBUG_UNICODE_CPP) $(CPP_INCLUDES) SampleApp.cpp -o $(DEBUG_UNICODE_OBJ_PATH)/SampleApp.o

############################################################################

# create release directories
release_paths:
	mkdir -p $(RELEASE_TARGET_PATH)
	mkdir -p $(RELEASE_OBJ_PATH)

# create debug directories
debug_paths:
	mkdir -p $(DEBUG_TARGET_PATH)
	mkdir -p $(DEBUG_OBJ_PATH)

# create release unicode directories
releaseUnicode_paths:
	mkdir -p $(RELEASE_UNICODE_TARGET_PATH)
	mkdir -p $(RELEASE_UNICODE_OBJ_PATH)

# create debug unicode directories
debugUnicode_paths:
	mkdir -p $(DEBUG_UNICODE_TARGET_PATH)
	mkdir -p $(DEBUG_UNICODE_OBJ_PATH)

# delete all files
clean: release_clean debug_clean releaseUnicode_clean debugUnicode_clean

# delete release files
release_clean:
	rm -f $(RELEASE_TARGET_PATH)/$(RELEASE_TARGET)
	rm -f $(RELEASE_OBJ_PATH)/*.o

# delete debug files
debug_clean:
	rm -f $(DEBUG_TARGET_PATH)/$(DEBUG_TARGET)
	rm -f $(DEBUG_OBJ_PATH)/*.o

# delete release unicode files
releaseUnicode_clean:
	rm -f $(RELEASE_UNICODE_TARGET_PATH)/$(RELEASE_UNICODE_TARGET)
	rm -f $(RELEASE_UNICODE_OBJ_PATH)/*.o

# delete debug unicode files
debugUnicode_clean:
	rm -f $(DEBUG_UNICODE_TARGET_PATH)/$(DEBUG_UNICODE_TARGET)
	rm -f $(DEBUG_UNICODE_OBJ_PATH)/*.o

