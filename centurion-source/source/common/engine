#pragma once

#include <gui>

using namespace std;
using namespace glm;

class Player;

//
//	CAMERA --> source/engine/camera.cpp
//

class Camera {
public:
	Camera();
	vec3 position;
	Camera(vec3 startPosition, vec3 startUp, GLfloat startYaw, GLfloat startPitch);
	void mouseControl(float threshold);
	void keyboardControl();
	void go_to_pos(GLfloat x, GLfloat y);
	mat4 calculateViewMatrix();
	~Camera();
private:
	vec3 front;
	vec3 up;
	vec3 right;
	vec3 worldUp;

	GLfloat yaw;
	GLfloat pitch;

	float threshold_x, threshold_y, abs_x, abs_y;
	void update();
};

//
//	WINDOW --> source/engine/window.cpp
//

class myWindow
{
public:
	myWindow();

	void init();
	void clear_buffers();
	void create_callbacks();
	int get_mouse_x() { return (int)lastX; };
	int get_mouse_y() { return (int)lastY; };
	bool* getKeys() { return keys; }
	~myWindow();

private:
	GLint bufferWidth, bufferHeight;
	bool keys[1024];

	static void handle_mouse(GLFWwindow* window, double xPos, double yPos);
	static void handle_keys(GLFWwindow* window, int key, int code, int action, int mode);
	static void mouse_button_callback(GLFWwindow* window, int button, int action, int mods);
	static void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
	static void character_callback(GLFWwindow* window, unsigned int codepoint);
	// input mouse
	GLfloat lastX;
	GLfloat lastY;
};

//
//	MOUSE --> source/engine/mouse.cpp
//

class Mouse
{
public:
	Mouse();
	void create();
	void render();
	void mouse_control(int lastX, int lastY);
	~Mouse();
private:
	gui::Image img;
	vec3 position;
	string currentState;
	float znoise, yzoomed, xPosGrid, yPosGrid;
};

//
// ENGINE --> source/engine/engine.cpp
//

namespace engine {

	class Engine {
	public:
		Engine();
		void Reset() { reset = true; }
		void setEnvironment(string s) { environment = s; }
		string getEnvironment() { return environment; }
		int launch();
		~Engine();

	private:
		// objects 
		myWindow window;
		Mouse *mouse;
		gui::SimpleText text;
		string environment;

		// fps
		double currentTime, lastTime, finalTime;
		int nbFrames, Fps, Mpfs;
		bool reset;
		void resetKeyCodes();
		void fps();
		void fps_sleep();
		void readDataClasses();
	};

	static Engine myengine; 
	Engine *ENGINE(); // -> definition in engine.cpp

	static Camera mycamera;
	Camera *CAMERA(); // -> definition in engine.cpp
};