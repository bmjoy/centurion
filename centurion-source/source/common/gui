#pragma once
#include <global>

namespace gui {

	using namespace std;
	using namespace glm;

	/*
		IMAGE --> source/gui/image.cpp
	*/

	class Image	{
	public:
		Image();
		Image(string ImageName);
		void create(string Origin, float x, float y, float w, float h, int pickingID);
		void render(bool picking, float x = 0.f, float y = 0.f);
		vec2 getImageSize() { return vec2(imgData.w, imgData.h); }
		~Image();
	private:
		ImageData imgData;
		string imageName;
		map<string, int> originMap;
	};

	/*
		SIMPLE TEXT --> source/gui/simple_text.cpp
	*/

	class SimpleText {
	public:
		SimpleText(string Type = "static", bool Shadow = false);
		void create_static(string text, string font, float x, float y, string halign, string valign, vec4 color, string fontWeight = "normal");
		void render_static();
		void render_dynamic(string text, string Font, float x, float y, vec4 color, string halign, string valign, string fontWeight = "normal");
		float get_width(int pos = 0);
		~SimpleText();
	private:
		string type;
		txt::StaticData data;
		string hAlign, vAlign;
		bool shadow;
	};


	/*
		TEXT BOX --> source/gui/text_box.cpp
	*/

	class TextBox {
	public:
		TextBox();
		void create(string text, string font, float x, float y, float width, float height, string halign, string valign, vec4 color, string fontWeight);
		void render();
		~TextBox();
	private:
		vector<txt::StaticData> lines_data;
		vector<string> lines;
		string hAlign, vAlign;
	};

	/*
		RECTANGLE --> source/gui/rectangle.cpp
	*/

	class Rectangle	{
	public:
		Rectangle();
		void create(string type, float x, float y, float w, float h, string origin, int pickingID);
		void render(vec4 Color, bool picking = false, float x = 0.f, float y = 0.f, float w = 0.f, float h = 0.f, int origin = -1);
		~Rectangle();
	private:
		RectangleData data;
		map<string, int> originMap;
	};

	/*
		CIRCLE --> source/gui/circle.cpp
	*/

	class Circle {
	public:
		Circle();
		void create(string type, float x, float y, float w, float h, float borderWidth, string origin);
		void render(vec4 Color, float x = 0.f, float y = 0.f, float w = 0.f, float h = 0.f, int origin = -1);
		~Circle();
	private:
		CircleData data;
		map<string, int> originMap;
	};

	/*
		BUTTON --> source/gui/button.cpp
	*/

	class Button {
	public:
		Button();
		void create(string imageName, string Text, int x, int y, int pickingID, vec4 textColor);
		void render(bool picking);
		~Button();
	private:
		SimpleText buttonText;
		Image buttonImage;
	};

	/*
		FORM INPUT --> source/gui/form_input.cpp
	*/

	class FormInput	{
	public:
		FormInput(bool options = true);
		void create(float x, float y, float w, float h, vector<string> options, int pickingID);
		void render(bool picking, vec4 color);
		void open_close();
		void close();
		void select_option(int i);
		void select_next();
		void select_previous();
		int get_clicked_option();
		string selectedText;
		~FormInput();
	private:
		Rectangle back;
		Rectangle back_options;
		vector<Rectangle> back_options_picking;
		SimpleText text;
		vector<SimpleText> optionsText;
		float width, height, x, y;
		vector<string> form_options;
		vec2 mainTextPos;
		bool boolOptions;
		bool isOpened;
		bool hasText;
		int nOptions;
		int selectedTextID;
	};

	/*
		TEXT INPUT --> source/gui/text_input.cpp
	*/

	class TextInput {
	public:
		TextInput();
		void create(string text, float x, float y, int maxChars);
		void render();
		void active(bool b = true) { is_active = b; }
		string get_text() { return current_text; }
		~TextInput();
	private:
		gui::Rectangle text_cursor;
		gui::SimpleText static_text;
		string current_text;
		bool is_active;
		float xPos, yPos;
		int cursorPosition;
		int max_chars;
	};
}