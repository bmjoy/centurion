#pragma once

#include <headers>
#include <primitives>

using namespace std;
using namespace glm;

//
//	NAMESPACE GLOBAL
//	FOR GLOBAL VARIABLES, PARAMETERS AND FUNCTIONS
//

namespace glb {
	static const string gameNameSTR = "Centurion";
	static const LPCSTR gameNameLPCSTR = "Centurion";
    static map<string, float> params; // global parameters
	static map<string, bool> booleans; // global booleans
	static map<string, string> errors; // error codes
	void setParam(string param, float value);
	float getParam(string param);
	void setBoolean(string param, bool value);
	bool getBoolean(string param);
	void setErrors(map<string, string> errorsMap);
	string getErrorCode(string error);
	void saveLog();

	// reading/saving map data 
	void readIndicesData(unsigned int *indices, string path);
	void readVerticesData(float *vertices, string path);
	void readVerticesPosData(int *verticesPos, string path);
	string ReadFile(const char* fileLocation);
	vector<string> get_all_files_names_within_folder(string folder);

	// other functions 
	float getYMinimapCoord(float x);
	bool cursorInGameScreen();
	void clearAndSwapBuffers(GLFWwindow *window);
	int get_id();
	vec3 getPickingColorFromID(int pickingID);
	vec2 getZoomedCoords(float xCoord, float yCoord);
	void forceGameClosure(string reason);
	void showGameWarning(string reason);
};

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//
//	NAMESPACE OBJECTS
//	FOR OBJECTS THAT COMMUNICATE WITH AUDIO/GRAPHIC DRIVERS
//

namespace obj {

	static AudioManager audioM;
	AudioManager *Audio();

	static BitmapFont txt;
	BitmapFont *Text();

	static BuildingSprite bsprite;
	BuildingSprite *BSprite();

	static CursorImage cursor;
	CursorImage *Cursor();

	static EmptyRectangle eRect;
	EmptyRectangle *ERectangle();

	static EmptyCircle eCircle;
	EmptyCircle *ECircle();

	static FilledRectangle fRect;
	FilledRectangle *FRectangle();

	static ImageSprite img;
	ImageSprite *Img();

	static UnitSprite usprite;
	UnitSprite *USprite();

	static Terrain terrain;
	Terrain *MapTerrain();

	static Grid grid;
	Grid *MapGrid();

	void applyMenuMatrices();
	void applyGameMatrices(mat4 *proj, mat4 *view);
	void init();
	void compile();
	void create();
};
