#pragma once 

#include <gui>
#include <json.hpp>
#include <object>

using namespace std;
using namespace glm;

class Surface;
class UIGame;
class Player;

namespace game {

	using namespace unit;
	using namespace building;

	// global game variables  --> see source/game/game_functions.cpp

	extern bool gameMenuStatus;
	extern bool gameMinimapStatus;
	extern bool gameGridStatus;
	extern int mapWidth, mapHeight;
	extern int playersNumber;
	extern int maxPlayersNumber;
	extern float cameraMovespeed;
	extern int currentZoomCamera;
	extern float zoomCameraFactor;
	extern float townhallRadius;

	extern map<int, Building> buildings;
	extern map<int, Unit> units;
	extern map<int, Unit> selectedUnits;

	extern vector<Player> playersList;

	//
	//	GAME CLASS --> source/game/game.cpp
	//

	class Game {
	public:
		Game();
		bool game_is_created() { return gameIsCreated; }
		void reset();
		void create();
		void run();
		void clear();
		int getSelectedUnits() { return (int)selectedUnits.size(); }
		~Game();
	private:
		Surface *surface;
		UIGame *ui;
		gui::Rectangle selRectangle;

		double lastTime;
		float threshold, cameraLastX, cameraLastY;
		bool blockMinimap;
		int click_id;
		json settl_data;
		string r;
		vec2 origin;
		mat4 view, projection;
		bool gameIsCreated;
	};
	
	static Game mygame;
	Game *GAME(); // --> definition in game_functions.cpp
	void init();

	//
	// GAME FUNCTIONS --> source/game/game_functions.cpp
	//
	
	struct SelRectPoints { float minX, maxX, minY, maxY; };

	static SelRectPoints selRectCoords;
	SelRectPoints *SelRectCoords();
	static int clickCount = 0;
	static float cameraToX = 0.f, cameraToY = 0.f;
	static bool doubleClick = false;
	static int clickIdList[2] = { 0, 0 };
	static float cameraLastX = 0.f;
	static float cameraLastY = 0.f;

	void picking(int *clickId, bool *blockMinimap);
	void tracing(Surface *s);
	void clearBuffers();
	void goToPosition(double *lastTime, int clickId, bool *blockMinimap);
	void renderObjects(gui::Rectangle *selRectangle, int clickId);
	void renderSelRectangle(gui::Rectangle *selRectangle);
	void setMinimapProjection();
};
