#include <header.h>
#include <ui.h>

//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

/*
	---- DEBUG UI ----
	It shows some useful informations about the engine
	For example FPS, selected units, mouse position, etc.
*/

class Building;
class Unit;

namespace debug {

	class DebugUI {
	public:
		DebugUI();
		void setStatus(bool b) { debuguiIsActive = b; }
		bool getStatus() { return debuguiIsActive; }
		void create();
		void render(int fps, int mpfs, int selUnits);
		~DebugUI();
	private:
		// text
		std::array<std::string, 10> staticTextList;
		std::array<std::string, 10> dynamicTextList;
		std::vector<gui::SimpleText> staticText;
		gui::SimpleText dynamicText;
		gui::SimpleText debugText[2];
		float startX, startY, deltaY;
		int n;
		bool debuguiIsActive;
		// background
		gui::Rectangle back;
		std::string currentLan;
	};

	static DebugUI mydebugui;
	DebugUI *DEBUG_UI();

};

//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------

/*
	---- MENU UI  ----
	Most of the menu UI comes from the JSON files contained in assets/data/interface/
	But some parts are implemented here, e.g. the player list
*/

namespace menu {

	//
	//	PLAYERS LIST
	//

	class PlayersList {
	public:
		PlayersList();
		void create(int startX, int startY, std::vector<int> *players_color);
		void close();
		void picking(int *numPlayers, std::vector<int> *players_color, int clickId);
		void render(int numPlayers, std::vector<int> players_color, bool picking);
		std::string get_race(int i);
		~PlayersList();
	private:
		std::vector<gui::Select> colors_Form;
		std::vector<gui::Select> players_Form;
		std::vector<gui::Select> civiliz_Form;
		gui::SimpleText dynamicText;
		gui::Image arrowDown, arrowUp;
		gui::Rectangle background;
		float textWidth;
		int x, y, deltaY, w, h;
	};

	//
	//	GLOBAL OPTIONS 
	//

	class GlobalOptions {
	public:
		GlobalOptions();
		void create();		
		void render(bool pick);
		std::string currentLan;
		~GlobalOptions();
	private:
		gui::Rectangle back;
		gui::SimpleText text[10];
		gui::Select languages;	
		float startX, startY;
		void picking();
	};
};

//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------


/*
	---- OBJECT UI (GAME) ----
*/

namespace game {
	class ObjectUI {
	public:
		ObjectUI();
		void create(std::string className);
		void render();
		~ObjectUI();
	private:
		gui::SimpleText objectName;
	};
}

/*
	---- GAME UI ----
*/

namespace game {

	//
	//	GAME MENU
	//

	class GameMenu {
	public:
		GameMenu();
		static bool IsActive() { return isActive; }
		static void Enable() { isActive = true; }
		static void Disable() { isActive = false; }
		void create();
		void render(bool picking);
		~GameMenu();
	private:
		gui::Button btn;
		gui::Rectangle background;
		std::vector<gui::Button> buttons;
		std::string s;
		float w, h, x, y;
		static bool isActive;
	};

	//
	//	GAME UI (Container class)
	//

	class UIGame {
	public:
		UIGame();
		void create(std::string race);
		void set_ui(ObjectUI* obj_ui);
		void render(bool pick);
		~UIGame();
	private:
		struct Time {
			double lastTime;
			std::string seconds_str, minutes_str, hours_str;
			int seconds, minutes, hours;
			gui::SimpleText text;
			float x;
			float y;
		} time;
		gui::Image top_bar;
		gui::Image bottom_bar;
		gui::Rectangle minimapRectangle;
		GameMenu gameMenu;

		ObjectUI objectUI;
		ObjectUI* objectUIptr;


		void picking(); // this function is here: source/picking/gameui_picking.cpp
		void calculateTime();
	};

	static UIGame myuigame;
	UIGame* GAME_UI();
};

//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------


/*
	---- EDITOR UI ----
	It consists of:
	1) Editor menu (on the top bar);
	2) Editor tools 
*/


namespace editor {

	//
	//	EDITOR MENU
	//
	
	// extern editor variables 
	// all the definitions are in source/editor/editor_functions.cpp

	extern bool IsWindowOpened;
	extern bool QuestionWindowIsOpen;
	extern bool NewMapWindowIsOpen;
	extern bool NewMapResetText;
	extern bool PropertiesWindowIsOpen;
	extern bool PropertiesWindowResetText;
	extern std::string currentMapName;
	extern bool OpenMapWindowIsOpen;
	extern bool OpenMapWindowUpdate;
	extern std::vector<std::string> availableScenarios;
	extern bool AddObjectWindowIsOpen;
	extern bool AddObjectWindowUpdateForm1and2;
	extern bool AddObjectWindowUpdateForm2;
	extern bool TerrainBrushWindowIsOpen;
	extern bool TerrainBrushIsActive;
	extern bool menuIsOpened;
	extern bool addingObject;
	extern gui::SimpleText textInfo;

	static const int NumberOfObjects = 100;
	extern std::string EditorObjectStringListForm0[NumberOfObjects];
	extern std::string EditorObjectStringListForm1[NumberOfObjects];
	extern std::string EditorObjectStringListForm2[NumberOfObjects];

	extern std::vector<std::string> EditorAddObjectBuildingOptions;
	extern std::vector<std::string> EditorAddObjectUnitOptions;
	extern std::vector<std::string> EditorAddObjectDecorationOptions;

	//---------------------------------------------------

	//
	//	NEW MAP WINDOW
	//

	class NewMapWindow {
	public:
		NewMapWindow();
		void create();
		void render(bool pick);
		~NewMapWindow();
	private:
		gui::TextInput text_input;
		gui::Image back_image;
		gui::Image buttons[2];
		gui::Image textinput_back;
		gui::SimpleText buttons_text[2];
		gui::SimpleText text[2];
		float startX, startY;
		void picking();
	};

	//
	//	EDITOR QUESTION WINDOW
	//

	class QuestionWindow {
	public:
		QuestionWindow();
		void create();
		void render(bool pick);
		void setQuestion(std::string Question);
		~QuestionWindow();
	private:
		gui::TextInput text_input;
		gui::Image back_image;
		gui::Image buttons[2];
		gui::SimpleText buttons_text[2];
		gui::TextBox questionText;
		float startX, startY;
		std::string question;
		void picking();
	};

	static QuestionWindow myquestionwindow;
	QuestionWindow *Q_WINDOW();

	//
	//	EDITOR ADD OBJECT WINDOW
	//

	class AddObjectWindow {
	public:
		AddObjectWindow();
		void create();
		void render(bool pick);
		~AddObjectWindow();
	private:
		gui::Image back_image;	
		gui::Image object_thumbnail;
		gui::Image arrows[2];
		gui::Image buttons[2];
		gui::SimpleText buttons_text[2];
		gui::Select objectForms[3];
		float startX, startY;
		int pickingIDs[3];
		std::string formSelectedTexts[3];
		std::string selectedObject;
		glm::ivec2 back_size;
		void picking();
		void update();
	};


	//
	//	TERRAIN BRUSH WINDOW
	//

	class TerrainBrushWindow {
	public:
		TerrainBrushWindow();
		void create();
		void render(bool pick);
		~TerrainBrushWindow();
	private:
		std::string selBrush;
		gui::Rectangle back;
		std::vector<gui::Select> forms;
		gui::Circle circle;
		float startX, startY;
		void picking();
	};

	//
	//  EDITOR UI (CONTAINER)
	//

	class EditorUI {
	public:
		EditorUI();
		void create();
		void render(bool picking);
		~EditorUI();
	private:
		NewMapWindow new_map_window;
		AddObjectWindow add_object_window;
		TerrainBrushWindow terrainbrush_window;
		gui::Rectangle minimapRectangle;
	};

	static EditorUI myeditorUI;
	EditorUI *EDITOR_UI();
};

