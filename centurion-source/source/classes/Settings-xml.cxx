// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Settings-xml.hxx"

// c_settings
// 

const c_settings::windowWidth_type& c_settings::
windowWidth() const
{
	return this->windowWidth_.get();
}

c_settings::windowWidth_type& c_settings::
windowWidth()
{
	return this->windowWidth_.get();
}

void c_settings::
windowWidth(const windowWidth_type& x)
{
	this->windowWidth_.set(x);
}

const c_settings::windowHeight_type& c_settings::
windowHeight() const
{
	return this->windowHeight_.get();
}

c_settings::windowHeight_type& c_settings::
windowHeight()
{
	return this->windowHeight_.get();
}

void c_settings::
windowHeight(const windowHeight_type& x)
{
	this->windowHeight_.set(x);
}

const c_settings::cameraMovespeed_type& c_settings::
cameraMovespeed() const
{
	return this->cameraMovespeed_.get();
}

c_settings::cameraMovespeed_type& c_settings::
cameraMovespeed()
{
	return this->cameraMovespeed_.get();
}

void c_settings::
cameraMovespeed(const cameraMovespeed_type& x)
{
	this->cameraMovespeed_.set(x);
}

const c_settings::cameraMaxZoom_type& c_settings::
cameraMaxZoom() const
{
	return this->cameraMaxZoom_.get();
}

c_settings::cameraMaxZoom_type& c_settings::
cameraMaxZoom()
{
	return this->cameraMaxZoom_.get();
}

void c_settings::
cameraMaxZoom(const cameraMaxZoom_type& x)
{
	this->cameraMaxZoom_.set(x);
}

const c_settings::language_type& c_settings::
language() const
{
	return this->language_.get();
}

c_settings::language_type& c_settings::
language()
{
	return this->language_.get();
}

void c_settings::
language(const language_type& x)
{
	this->language_.set(x);
}

void c_settings::
language(::std::auto_ptr< language_type > x)
{
	this->language_.set(x);
}

const c_settings::debug_type& c_settings::
debug() const
{
	return this->debug_.get();
}

c_settings::debug_type& c_settings::
debug()
{
	return this->debug_.get();
}

void c_settings::
debug(const debug_type& x)
{
	this->debug_.set(x);
}

const c_settings::fullScreen_type& c_settings::
fullScreen() const
{
	return this->fullScreen_.get();
}

c_settings::fullScreen_type& c_settings::
fullScreen()
{
	return this->fullScreen_.get();
}

void c_settings::
fullScreen(const fullScreen_type& x)
{
	this->fullScreen_.set(x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// c_settings
//

c_settings::
c_settings(const windowWidth_type& windowWidth,
	const windowHeight_type& windowHeight,
	const cameraMovespeed_type& cameraMovespeed,
	const cameraMaxZoom_type& cameraMaxZoom,
	const language_type& language,
	const debug_type& debug,
	const fullScreen_type& fullScreen)
	: ::xml_schema::type(),
	windowWidth_(windowWidth, this),
	windowHeight_(windowHeight, this),
	cameraMovespeed_(cameraMovespeed, this),
	cameraMaxZoom_(cameraMaxZoom, this),
	language_(language, this),
	debug_(debug, this),
	fullScreen_(fullScreen, this)
{
}

c_settings::
c_settings(const c_settings& x,
	::xml_schema::flags f,
	::xml_schema::container* c)
	: ::xml_schema::type(x, f, c),
	windowWidth_(x.windowWidth_, f, this),
	windowHeight_(x.windowHeight_, f, this),
	cameraMovespeed_(x.cameraMovespeed_, f, this),
	cameraMaxZoom_(x.cameraMaxZoom_, f, this),
	language_(x.language_, f, this),
	debug_(x.debug_, f, this),
	fullScreen_(x.fullScreen_, f, this)
{
}

c_settings::
c_settings(const ::xercesc::DOMElement& e,
	::xml_schema::flags f,
	::xml_schema::container* c)
	: ::xml_schema::type(e, f | ::xml_schema::flags::base, c),
	windowWidth_(this),
	windowHeight_(this),
	cameraMovespeed_(this),
	cameraMaxZoom_(this),
	language_(this),
	debug_(this),
	fullScreen_(this)
{
	if ((f & ::xml_schema::flags::base) == 0)
	{
		::xsd::cxx::xml::dom::parser< char > p(e, true, false, false);
		this->parse(p, f);
	}
}

void c_settings::
parse(::xsd::cxx::xml::dom::parser< char >& p,
	::xml_schema::flags f)
{
	for (; p.more_content(); p.next_content(false))
	{
		const ::xercesc::DOMElement& i(p.cur_element());
		const ::xsd::cxx::xml::qualified_name< char > n(
			::xsd::cxx::xml::dom::name< char >(i));

		// windowWidth
		//
		if (n.name() == "windowWidth" && n.namespace_().empty())
		{
			if (!windowWidth_.present())
			{
				this->windowWidth_.set(windowWidth_traits::create(i, f, this));
				continue;
			}
		}

		// windowHeight
		//
		if (n.name() == "windowHeight" && n.namespace_().empty())
		{
			if (!windowHeight_.present())
			{
				this->windowHeight_.set(windowHeight_traits::create(i, f, this));
				continue;
			}
		}

		// cameraMovespeed
		//
		if (n.name() == "cameraMovespeed" && n.namespace_().empty())
		{
			if (!cameraMovespeed_.present())
			{
				this->cameraMovespeed_.set(cameraMovespeed_traits::create(i, f, this));
				continue;
			}
		}

		// cameraMaxZoom
		//
		if (n.name() == "cameraMaxZoom" && n.namespace_().empty())
		{
			if (!cameraMaxZoom_.present())
			{
				this->cameraMaxZoom_.set(cameraMaxZoom_traits::create(i, f, this));
				continue;
			}
		}

		// language
		//
		if (n.name() == "language" && n.namespace_().empty())
		{
			::std::auto_ptr< language_type > r(
				language_traits::create(i, f, this));

			if (!language_.present())
			{
				this->language_.set(r);
				continue;
			}
		}

		// debug
		//
		if (n.name() == "debug" && n.namespace_().empty())
		{
			if (!debug_.present())
			{
				this->debug_.set(debug_traits::create(i, f, this));
				continue;
			}
		}

		// fullScreen
		//
		if (n.name() == "fullScreen" && n.namespace_().empty())
		{
			if (!fullScreen_.present())
			{
				this->fullScreen_.set(fullScreen_traits::create(i, f, this));
				continue;
			}
		}

		break;
	}

	if (!windowWidth_.present())
	{
		throw ::xsd::cxx::tree::expected_element< char >(
			"windowWidth",
			"");
	}

	if (!windowHeight_.present())
	{
		throw ::xsd::cxx::tree::expected_element< char >(
			"windowHeight",
			"");
	}

	if (!cameraMovespeed_.present())
	{
		throw ::xsd::cxx::tree::expected_element< char >(
			"cameraMovespeed",
			"");
	}

	if (!cameraMaxZoom_.present())
	{
		throw ::xsd::cxx::tree::expected_element< char >(
			"cameraMaxZoom",
			"");
	}

	if (!language_.present())
	{
		throw ::xsd::cxx::tree::expected_element< char >(
			"language",
			"");
	}

	if (!debug_.present())
	{
		throw ::xsd::cxx::tree::expected_element< char >(
			"debug",
			"");
	}

	if (!fullScreen_.present())
	{
		throw ::xsd::cxx::tree::expected_element< char >(
			"fullScreen",
			"");
	}
}

c_settings* c_settings::
_clone(::xml_schema::flags f,
	::xml_schema::container* c) const
{
	return new class c_settings(*this, f, c);
}

c_settings& c_settings::
operator= (const c_settings& x)
{
	if (this != &x)
	{
		static_cast<::xml_schema::type&> (*this) = x;
		this->windowWidth_ = x.windowWidth_;
		this->windowHeight_ = x.windowHeight_;
		this->cameraMovespeed_ = x.cameraMovespeed_;
		this->cameraMaxZoom_ = x.cameraMaxZoom_;
		this->language_ = x.language_;
		this->debug_ = x.debug_;
		this->fullScreen_ = x.fullScreen_;
	}

	return *this;
}

c_settings::
~c_settings()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::c_settings >
c_settings_(const ::std::string& u,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0,
		(f & ::xml_schema::flags::keep_dom) == 0);

	::xsd::cxx::tree::error_handler< char > h;

	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::xsd::cxx::xml::dom::parse< char >(
			u, h, p, f));

	h.throw_if_failed< ::xsd::cxx::tree::parsing< char > >();

	return ::std::auto_ptr< ::c_settings >(
		::c_settings_(
			d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_settings >
c_settings_(const ::std::string& u,
	::xml_schema::error_handler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0,
		(f & ::xml_schema::flags::keep_dom) == 0);

	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::xsd::cxx::xml::dom::parse< char >(
			u, h, p, f));

	if (!d.get())
		throw ::xsd::cxx::tree::parsing< char >();

	return ::std::auto_ptr< ::c_settings >(
		::c_settings_(
			d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_settings >
c_settings_(const ::std::string& u,
	::xercesc::DOMErrorHandler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::xsd::cxx::xml::dom::parse< char >(
			u, h, p, f));

	if (!d.get())
		throw ::xsd::cxx::tree::parsing< char >();

	return ::std::auto_ptr< ::c_settings >(
		::c_settings_(
			d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_settings >
c_settings_(::std::istream& is,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0,
		(f & ::xml_schema::flags::keep_dom) == 0);

	::xsd::cxx::xml::sax::std_input_source isrc(is);
	return ::c_settings_(isrc, f, p);
}

::std::auto_ptr< ::c_settings >
c_settings_(::std::istream& is,
	::xml_schema::error_handler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0,
		(f & ::xml_schema::flags::keep_dom) == 0);

	::xsd::cxx::xml::sax::std_input_source isrc(is);
	return ::c_settings_(isrc, h, f, p);
}

::std::auto_ptr< ::c_settings >
c_settings_(::std::istream& is,
	::xercesc::DOMErrorHandler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::sax::std_input_source isrc(is);
	return ::c_settings_(isrc, h, f, p);
}

::std::auto_ptr< ::c_settings >
c_settings_(::std::istream& is,
	const ::std::string& sid,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0,
		(f & ::xml_schema::flags::keep_dom) == 0);

	::xsd::cxx::xml::sax::std_input_source isrc(is, sid);
	return ::c_settings_(isrc, f, p);
}

::std::auto_ptr< ::c_settings >
c_settings_(::std::istream& is,
	const ::std::string& sid,
	::xml_schema::error_handler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0,
		(f & ::xml_schema::flags::keep_dom) == 0);

	::xsd::cxx::xml::sax::std_input_source isrc(is, sid);
	return ::c_settings_(isrc, h, f, p);
}

::std::auto_ptr< ::c_settings >
c_settings_(::std::istream& is,
	const ::std::string& sid,
	::xercesc::DOMErrorHandler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::xml::sax::std_input_source isrc(is, sid);
	return ::c_settings_(isrc, h, f, p);
}

::std::auto_ptr< ::c_settings >
c_settings_(::xercesc::InputSource& i,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xsd::cxx::tree::error_handler< char > h;

	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::xsd::cxx::xml::dom::parse< char >(
			i, h, p, f));

	h.throw_if_failed< ::xsd::cxx::tree::parsing< char > >();

	return ::std::auto_ptr< ::c_settings >(
		::c_settings_(
			d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_settings >
c_settings_(::xercesc::InputSource& i,
	::xml_schema::error_handler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::xsd::cxx::xml::dom::parse< char >(
			i, h, p, f));

	if (!d.get())
		throw ::xsd::cxx::tree::parsing< char >();

	return ::std::auto_ptr< ::c_settings >(
		::c_settings_(
			d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_settings >
c_settings_(::xercesc::InputSource& i,
	::xercesc::DOMErrorHandler& h,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::xsd::cxx::xml::dom::parse< char >(
			i, h, p, f));

	if (!d.get())
		throw ::xsd::cxx::tree::parsing< char >();

	return ::std::auto_ptr< ::c_settings >(
		::c_settings_(
			d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_settings >
c_settings_(const ::xercesc::DOMDocument& doc,
	::xml_schema::flags f,
	const ::xml_schema::properties& p)
{
	if (f & ::xml_schema::flags::keep_dom)
	{
		::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
			static_cast<::xercesc::DOMDocument*> (doc.cloneNode(true)));

		return ::std::auto_ptr< ::c_settings >(
			::c_settings_(
				d, f | ::xml_schema::flags::own_dom, p));
	}

	const ::xercesc::DOMElement& e(*doc.getDocumentElement());
	const ::xsd::cxx::xml::qualified_name< char > n(
		::xsd::cxx::xml::dom::name< char >(e));

	if (n.name() == "c_settings" &&
		n.namespace_() == "")
	{
		::std::auto_ptr< ::c_settings > r(
			::xsd::cxx::tree::traits< ::c_settings, char >::create(
				e, f, 0));
		return r;
	}

	throw ::xsd::cxx::tree::unexpected_element < char >(
		n.name(),
		n.namespace_(),
		"c_settings",
		"");
}

::std::auto_ptr< ::c_settings >
c_settings_(::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
	::xml_schema::flags f,
	const ::xml_schema::properties&)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c(
		((f & ::xml_schema::flags::keep_dom) &&
			!(f & ::xml_schema::flags::own_dom))
		? static_cast<::xercesc::DOMDocument*> (d->cloneNode(true))
		: 0);

	::xercesc::DOMDocument& doc(c.get() ? *c : *d);
	const ::xercesc::DOMElement& e(*doc.getDocumentElement());

	const ::xsd::cxx::xml::qualified_name< char > n(
		::xsd::cxx::xml::dom::name< char >(e));

	if (f & ::xml_schema::flags::keep_dom)
		doc.setUserData(::xml_schema::dom::tree_node_key,
		(c.get() ? &c : &d),
			0);

	if (n.name() == "c_settings" &&
		n.namespace_() == "")
	{
		::std::auto_ptr< ::c_settings > r(
			::xsd::cxx::tree::traits< ::c_settings, char >::create(
				e, f, 0));
		return r;
	}

	throw ::xsd::cxx::tree::unexpected_element < char >(
		n.name(),
		n.namespace_(),
		"c_settings",
		"");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
c_settings_(::std::ostream& o,
	const ::c_settings& s,
	const ::xml_schema::namespace_infomap& m,
	const ::std::string& e,
	::xml_schema::flags f)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0);

	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::c_settings_(s, m, f));

	::xsd::cxx::tree::error_handler< char > h;

	::xsd::cxx::xml::dom::ostream_format_target t(o);
	if (!::xsd::cxx::xml::dom::serialize(t, *d, e, h, f))
	{
		h.throw_if_failed< ::xsd::cxx::tree::serialization< char > >();
	}
}

void
c_settings_(::std::ostream& o,
	const ::c_settings& s,
	::xml_schema::error_handler& h,
	const ::xml_schema::namespace_infomap& m,
	const ::std::string& e,
	::xml_schema::flags f)
{
	::xsd::cxx::xml::auto_initializer i(
		(f & ::xml_schema::flags::dont_initialize) == 0);

	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::c_settings_(s, m, f));
	::xsd::cxx::xml::dom::ostream_format_target t(o);
	if (!::xsd::cxx::xml::dom::serialize(t, *d, e, h, f))
	{
		throw ::xsd::cxx::tree::serialization< char >();
	}
}

void
c_settings_(::std::ostream& o,
	const ::c_settings& s,
	::xercesc::DOMErrorHandler& h,
	const ::xml_schema::namespace_infomap& m,
	const ::std::string& e,
	::xml_schema::flags f)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::c_settings_(s, m, f));
	::xsd::cxx::xml::dom::ostream_format_target t(o);
	if (!::xsd::cxx::xml::dom::serialize(t, *d, e, h, f))
	{
		throw ::xsd::cxx::tree::serialization< char >();
	}
}

void
c_settings_(::xercesc::XMLFormatTarget& t,
	const ::c_settings& s,
	const ::xml_schema::namespace_infomap& m,
	const ::std::string& e,
	::xml_schema::flags f)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::c_settings_(s, m, f));

	::xsd::cxx::tree::error_handler< char > h;

	if (!::xsd::cxx::xml::dom::serialize(t, *d, e, h, f))
	{
		h.throw_if_failed< ::xsd::cxx::tree::serialization< char > >();
	}
}

void
c_settings_(::xercesc::XMLFormatTarget& t,
	const ::c_settings& s,
	::xml_schema::error_handler& h,
	const ::xml_schema::namespace_infomap& m,
	const ::std::string& e,
	::xml_schema::flags f)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::c_settings_(s, m, f));
	if (!::xsd::cxx::xml::dom::serialize(t, *d, e, h, f))
	{
		throw ::xsd::cxx::tree::serialization< char >();
	}
}

void
c_settings_(::xercesc::XMLFormatTarget& t,
	const ::c_settings& s,
	::xercesc::DOMErrorHandler& h,
	const ::xml_schema::namespace_infomap& m,
	const ::std::string& e,
	::xml_schema::flags f)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::c_settings_(s, m, f));
	if (!::xsd::cxx::xml::dom::serialize(t, *d, e, h, f))
	{
		throw ::xsd::cxx::tree::serialization< char >();
	}
}

void
c_settings_(::xercesc::DOMDocument& d,
	const ::c_settings& s,
	::xml_schema::flags)
{
	::xercesc::DOMElement& e(*d.getDocumentElement());
	const ::xsd::cxx::xml::qualified_name< char > n(
		::xsd::cxx::xml::dom::name< char >(e));

	if (n.name() == "c_settings" &&
		n.namespace_() == "")
	{
		e << s;
	}
	else
	{
		throw ::xsd::cxx::tree::unexpected_element < char >(
			n.name(),
			n.namespace_(),
			"c_settings",
			"");
	}
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
c_settings_(const ::c_settings& s,
	const ::xml_schema::namespace_infomap& m,
	::xml_schema::flags f)
{
	::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d(
		::xsd::cxx::xml::dom::serialize< char >(
			"c_settings",
			"",
			m, f));

	::c_settings_(*d, s, f);
	return d;
}

void
operator<< (::xercesc::DOMElement& e, const c_settings& i)
{
	e << static_cast<const ::xml_schema::type&> (i);

	// windowWidth
	//
	{
		::xercesc::DOMElement& s(
			::xsd::cxx::xml::dom::create_element(
				"windowWidth",
				e));

		s << i.windowWidth();
	}

	// windowHeight
	//
	{
		::xercesc::DOMElement& s(
			::xsd::cxx::xml::dom::create_element(
				"windowHeight",
				e));

		s << i.windowHeight();
	}

	// cameraMovespeed
	//
	{
		::xercesc::DOMElement& s(
			::xsd::cxx::xml::dom::create_element(
				"cameraMovespeed",
				e));

		s << i.cameraMovespeed();
	}

	// cameraMaxZoom
	//
	{
		::xercesc::DOMElement& s(
			::xsd::cxx::xml::dom::create_element(
				"cameraMaxZoom",
				e));

		s << i.cameraMaxZoom();
	}

	// language
	//
	{
		::xercesc::DOMElement& s(
			::xsd::cxx::xml::dom::create_element(
				"language",
				e));

		s << i.language();
	}

	// debug
	//
	{
		::xercesc::DOMElement& s(
			::xsd::cxx::xml::dom::create_element(
				"debug",
				e));

		s << i.debug();
	}

	// fullScreen
	//
	{
		::xercesc::DOMElement& s(
			::xsd::cxx::xml::dom::create_element(
				"fullScreen",
				e));

		s << i.fullScreen();
	}
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

