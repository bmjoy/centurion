// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "fontCharacters-xml.hxx"

// chars
// 

const chars::char_sequence& chars::
char_ () const
{
  return this->char__;
}

chars::char_sequence& chars::
char_ ()
{
  return this->char__;
}

void chars::
char_ (const char_sequence& s)
{
  this->char__ = s;
}

const chars::name_type& chars::
name () const
{
  return this->name_.get ();
}

chars::name_type& chars::
name ()
{
  return this->name_.get ();
}

void chars::
name (const name_type& x)
{
  this->name_.set (x);
}

void chars::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// char_
// 

const char_::id_type& char_::
id () const
{
  return this->id_.get ();
}

char_::id_type& char_::
id ()
{
  return this->id_.get ();
}

void char_::
id (const id_type& x)
{
  this->id_.set (x);
}

const char_::x_type& char_::
x () const
{
  return this->x_.get ();
}

char_::x_type& char_::
x ()
{
  return this->x_.get ();
}

void char_::
x (const x_type& x)
{
  this->x_.set (x);
}

const char_::y_type& char_::
y () const
{
  return this->y_.get ();
}

char_::y_type& char_::
y ()
{
  return this->y_.get ();
}

void char_::
y (const y_type& x)
{
  this->y_.set (x);
}

const char_::width_type& char_::
width () const
{
  return this->width_.get ();
}

char_::width_type& char_::
width ()
{
  return this->width_.get ();
}

void char_::
width (const width_type& x)
{
  this->width_.set (x);
}

const char_::height_type& char_::
height () const
{
  return this->height_.get ();
}

char_::height_type& char_::
height ()
{
  return this->height_.get ();
}

void char_::
height (const height_type& x)
{
  this->height_.set (x);
}

const char_::xoffset_type& char_::
xoffset () const
{
  return this->xoffset_.get ();
}

char_::xoffset_type& char_::
xoffset ()
{
  return this->xoffset_.get ();
}

void char_::
xoffset (const xoffset_type& x)
{
  this->xoffset_.set (x);
}

const char_::yoffset_type& char_::
yoffset () const
{
  return this->yoffset_.get ();
}

char_::yoffset_type& char_::
yoffset ()
{
  return this->yoffset_.get ();
}

void char_::
yoffset (const yoffset_type& x)
{
  this->yoffset_.set (x);
}

const char_::xadvance_type& char_::
xadvance () const
{
  return this->xadvance_.get ();
}

char_::xadvance_type& char_::
xadvance ()
{
  return this->xadvance_.get ();
}

void char_::
xadvance (const xadvance_type& x)
{
  this->xadvance_.set (x);
}

const char_::lineheight_type& char_::
lineheight () const
{
  return this->lineheight_.get ();
}

char_::lineheight_type& char_::
lineheight ()
{
  return this->lineheight_.get ();
}

void char_::
lineheight (const lineheight_type& x)
{
  this->lineheight_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// chars
//

chars::
chars (const name_type& name)
: ::xml_schema::type (),
  char__ (this),
  name_ (name, this)
{
}

chars::
chars (const chars& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  char__ (x.char__, f, this),
  name_ (x.name_, f, this)
{
}

chars::
chars (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  char__ (this),
  name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void chars::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // char
    //
    if (n.name () == "char" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< char_type > r (
        char_traits::create (i, f, this));

      this->char__.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

chars* chars::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class chars (*this, f, c);
}

chars& chars::
operator= (const chars& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->char__ = x.char__;
    this->name_ = x.name_;
  }

  return *this;
}

chars::
~chars ()
{
}

// char_
//

char_::
char_ (const id_type& id,
       const x_type& x,
       const y_type& y,
       const width_type& width,
       const height_type& height,
       const xoffset_type& xoffset,
       const yoffset_type& yoffset,
       const xadvance_type& xadvance,
       const lineheight_type& lineheight)
: ::xml_schema::type (),
  id_ (id, this),
  x_ (x, this),
  y_ (y, this),
  width_ (width, this),
  height_ (height, this),
  xoffset_ (xoffset, this),
  yoffset_ (yoffset, this),
  xadvance_ (xadvance, this),
  lineheight_ (lineheight, this)
{
}

char_::
char_ (const char_& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  width_ (x.width_, f, this),
  height_ (x.height_, f, this),
  xoffset_ (x.xoffset_, f, this),
  yoffset_ (x.yoffset_, f, this),
  xadvance_ (x.xadvance_, f, this),
  lineheight_ (x.lineheight_, f, this)
{
}

char_::
char_ (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  id_ (this),
  x_ (this),
  y_ (this),
  width_ (this),
  height_ (this),
  xoffset_ (this),
  yoffset_ (this),
  xadvance_ (this),
  lineheight_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void char_::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      this->id_.set (id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (x_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "width" && n.namespace_ ().empty ())
    {
      this->width_.set (width_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "height" && n.namespace_ ().empty ())
    {
      this->height_.set (height_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "xoffset" && n.namespace_ ().empty ())
    {
      this->xoffset_.set (xoffset_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "yoffset" && n.namespace_ ().empty ())
    {
      this->yoffset_.set (yoffset_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "xadvance" && n.namespace_ ().empty ())
    {
      this->xadvance_.set (xadvance_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "lineheight" && n.namespace_ ().empty ())
    {
      this->lineheight_.set (lineheight_traits::create (i, f, this));
      continue;
    }
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "id",
      "");
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y",
      "");
  }

  if (!width_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "width",
      "");
  }

  if (!height_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "height",
      "");
  }

  if (!xoffset_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "xoffset",
      "");
  }

  if (!yoffset_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "yoffset",
      "");
  }

  if (!xadvance_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "xadvance",
      "");
  }

  if (!lineheight_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "lineheight",
      "");
  }
}

char_* char_::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class char_ (*this, f, c);
}

char_& char_::
operator= (const char_& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->width_ = x.width_;
    this->height_ = x.height_;
    this->xoffset_ = x.xoffset_;
    this->yoffset_ = x.yoffset_;
    this->xadvance_ = x.xadvance_;
    this->lineheight_ = x.lineheight_;
  }

  return *this;
}

char_::
~char_ ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::chars >
chars_ (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::chars > (
    ::chars_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::chars >
chars_ (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::chars > (
    ::chars_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::chars >
chars_ (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::chars > (
    ::chars_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::chars >
chars_ (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::chars_ (isrc, f, p);
}

::std::auto_ptr< ::chars >
chars_ (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::chars_ (isrc, h, f, p);
}

::std::auto_ptr< ::chars >
chars_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::chars_ (isrc, h, f, p);
}

::std::auto_ptr< ::chars >
chars_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::chars_ (isrc, f, p);
}

::std::auto_ptr< ::chars >
chars_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::chars_ (isrc, h, f, p);
}

::std::auto_ptr< ::chars >
chars_ (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::chars_ (isrc, h, f, p);
}

::std::auto_ptr< ::chars >
chars_ (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::chars > (
    ::chars_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::chars >
chars_ (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::chars > (
    ::chars_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::chars >
chars_ (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::chars > (
    ::chars_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::chars >
chars_ (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::chars > (
      ::chars_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "chars" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::chars > r (
      ::xsd::cxx::tree::traits< ::chars, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "chars",
    "");
}

::std::auto_ptr< ::chars >
chars_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "chars" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::chars > r (
      ::xsd::cxx::tree::traits< ::chars, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "chars",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

