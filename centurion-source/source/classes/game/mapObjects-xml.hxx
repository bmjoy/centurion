// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MAP_OBJECTS_HXX
#define MAP_OBJECTS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
	// anyType and anySimpleType.
	//
	typedef ::xsd::cxx::tree::type type;
	typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
	typedef ::xsd::cxx::tree::type container;

	// 8-bit
	//
	typedef signed char byte;
	typedef unsigned char unsigned_byte;

	// 16-bit
	//
	typedef short short_;
	typedef unsigned short unsigned_short;

	// 32-bit
	//
	typedef int int_;
	typedef unsigned int unsigned_int;

	// 64-bit
	//
	typedef long long long_;
	typedef unsigned long long unsigned_long;

	// Supposed to be arbitrary-length integral types.
	//
	typedef long long integer;
	typedef long long non_positive_integer;
	typedef unsigned long long non_negative_integer;
	typedef unsigned long long positive_integer;
	typedef long long negative_integer;

	// Boolean.
	//
	typedef bool boolean;

	// Floating-point types.
	//
	typedef float float_;
	typedef double double_;
	typedef double decimal;

	// String types.
	//
	typedef ::xsd::cxx::tree::string< char, simple_type > string;
	typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
	typedef ::xsd::cxx::tree::token< char, normalized_string > token;
	typedef ::xsd::cxx::tree::name< char, token > name;
	typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
	typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
	typedef ::xsd::cxx::tree::ncname< char, name > ncname;
	typedef ::xsd::cxx::tree::language< char, token > language;

	// ID/IDREF.
	//
	typedef ::xsd::cxx::tree::id< char, ncname > id;
	typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
	typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

	// URI.
	//
	typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

	// Qualified name.
	//
	typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

	// Binary.
	//
	typedef ::xsd::cxx::tree::buffer< char > buffer;
	typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
	typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

	// Date/time.
	//
	typedef ::xsd::cxx::tree::time_zone time_zone;
	typedef ::xsd::cxx::tree::date< char, simple_type > date;
	typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
	typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
	typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
	typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
	typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
	typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
	typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
	typedef ::xsd::cxx::tree::time< char, simple_type > time;

	// Entity.
	//
	typedef ::xsd::cxx::tree::entity< char, ncname > entity;
	typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

	typedef ::xsd::cxx::tree::content_order content_order;
	// Namespace information and list stream. Used in
	// serialization functions.
	//
	typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
	typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
	typedef ::xsd::cxx::tree::list_stream< char > list_stream;
	typedef ::xsd::cxx::tree::as_double< double_ > as_double;
	typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
	typedef ::xsd::cxx::tree::facet facet;

	// Flags and properties.
	//
	typedef ::xsd::cxx::tree::flags flags;
	typedef ::xsd::cxx::tree::properties< char > properties;

	// Parsing/serialization diagnostics.
	//
	typedef ::xsd::cxx::tree::severity severity;
	typedef ::xsd::cxx::tree::error< char > error;
	typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

	// Exceptions.
	//
	typedef ::xsd::cxx::tree::exception< char > exception;
	typedef ::xsd::cxx::tree::bounds< char > bounds;
	typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
	typedef ::xsd::cxx::tree::parsing< char > parsing;
	typedef ::xsd::cxx::tree::expected_element< char > expected_element;
	typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
	typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
	typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
	typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
	typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
	typedef ::xsd::cxx::tree::serialization< char > serialization;

	// Error handler callback interface.
	//
	typedef ::xsd::cxx::xml::error_handler< char > error_handler;

	// DOM interaction.
	//
	namespace dom
	{
		// Automatic pointer for DOMDocument.
		//
		using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
		// DOM user data key for back pointers to tree nodes.
		//
		const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
	}
}

// Forward declarations.
//
class c_mapObjects;
class object;
class settlement;
class object1;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class c_mapObjects : public ::xml_schema::type
{
public:
	// object
	//
	typedef ::object object_type;
	typedef ::xsd::cxx::tree::sequence< object_type > object_sequence;
	typedef object_sequence::iterator object_iterator;
	typedef object_sequence::const_iterator object_const_iterator;
	typedef ::xsd::cxx::tree::traits< object_type, char > object_traits;

	const object_sequence&
		object() const;

	object_sequence&
		object();

	void
		object(const object_sequence& s);

	// settlement
	//
	typedef ::settlement settlement_type;
	typedef ::xsd::cxx::tree::sequence< settlement_type > settlement_sequence;
	typedef settlement_sequence::iterator settlement_iterator;
	typedef settlement_sequence::const_iterator settlement_const_iterator;
	typedef ::xsd::cxx::tree::traits< settlement_type, char > settlement_traits;

	const settlement_sequence&
		settlement() const;

	settlement_sequence&
		settlement();

	void
		settlement(const settlement_sequence& s);

	// Constructors.
	//
	c_mapObjects();

	c_mapObjects(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	c_mapObjects(const c_mapObjects& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual c_mapObjects*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	c_mapObjects&
		operator= (const c_mapObjects& x);

	virtual
		~c_mapObjects();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	object_sequence object_;
	settlement_sequence settlement_;
};

class object : public ::xml_schema::type
{
public:
	// class
	//
	typedef ::xml_schema::string class_type;
	typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

	const class_type&
		class_() const;

	class_type&
		class_();

	void
		class_(const class_type& x);

	void
		class_(::std::auto_ptr< class_type > p);

	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// healthperc
	//
	typedef ::xml_schema::integer healthperc_type;
	typedef ::xsd::cxx::tree::optional< healthperc_type > healthperc_optional;
	typedef ::xsd::cxx::tree::traits< healthperc_type, char > healthperc_traits;

	const healthperc_optional&
		healthperc() const;

	healthperc_optional&
		healthperc();

	void
		healthperc(const healthperc_type& x);

	void
		healthperc(const healthperc_optional& x);

	// player
	//
	typedef ::xml_schema::integer player_type;
	typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

	const player_type&
		player() const;

	player_type&
		player();

	void
		player(const player_type& x);

	// x
	//
	typedef ::xml_schema::integer x_type;
	typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

	const x_type&
		x() const;

	x_type&
		x();

	void
		x(const x_type& x);

	// y
	//
	typedef ::xml_schema::integer y_type;
	typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

	const y_type&
		y() const;

	y_type&
		y();

	void
		y(const y_type& x);

	// name
	//
	typedef ::xml_schema::string name_type;
	typedef ::xsd::cxx::tree::optional< name_type > name_optional;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_optional&
		name() const;

	name_optional&
		name();

	void
		name(const name_type& x);

	void
		name(const name_optional& x);

	void
		name(::std::auto_ptr< name_type > p);

	// icon
	//
	typedef ::xml_schema::string icon_type;
	typedef ::xsd::cxx::tree::optional< icon_type > icon_optional;
	typedef ::xsd::cxx::tree::traits< icon_type, char > icon_traits;

	const icon_optional&
		icon() const;

	icon_optional&
		icon();

	void
		icon(const icon_type& x);

	void
		icon(const icon_optional& x);

	void
		icon(::std::auto_ptr< icon_type > p);

	// Constructors.
	//
	object(const class_type&,
		const id_type&,
		const player_type&,
		const x_type&,
		const y_type&);

	object(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	object(const object& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual object*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	object&
		operator= (const object& x);

	virtual
		~object();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< class_type > class__;
	::xsd::cxx::tree::one< id_type > id_;
	healthperc_optional healthperc_;
	::xsd::cxx::tree::one< player_type > player_;
	::xsd::cxx::tree::one< x_type > x_;
	::xsd::cxx::tree::one< y_type > y_;
	name_optional name_;
	icon_optional icon_;
};

class settlement : public ::xml_schema::type
{
public:
	// object
	//
	typedef ::object1 object_type;
	typedef ::xsd::cxx::tree::sequence< object_type > object_sequence;
	typedef object_sequence::iterator object_iterator;
	typedef object_sequence::const_iterator object_const_iterator;
	typedef ::xsd::cxx::tree::traits< object_type, char > object_traits;

	const object_sequence&
		object() const;

	object_sequence&
		object();

	void
		object(const object_sequence& s);

	// class
	//
	typedef ::xml_schema::string class_type;
	typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

	const class_type&
		class_() const;

	class_type&
		class_();

	void
		class_(const class_type& x);

	void
		class_(::std::auto_ptr< class_type > p);

	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// player
	//
	typedef ::xml_schema::integer player_type;
	typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

	const player_type&
		player() const;

	player_type&
		player();

	void
		player(const player_type& x);

	// x
	//
	typedef ::xml_schema::integer x_type;
	typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

	const x_type&
		x() const;

	x_type&
		x();

	void
		x(const x_type& x);

	// y
	//
	typedef ::xml_schema::integer y_type;
	typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

	const y_type&
		y() const;

	y_type&
		y();

	void
		y(const y_type& x);

	// name
	//
	typedef ::xml_schema::string name_type;
	typedef ::xsd::cxx::tree::optional< name_type > name_optional;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_optional&
		name() const;

	name_optional&
		name();

	void
		name(const name_type& x);

	void
		name(const name_optional& x);

	void
		name(::std::auto_ptr< name_type > p);

	// gold
	//
	typedef ::xml_schema::integer gold_type;
	typedef ::xsd::cxx::tree::traits< gold_type, char > gold_traits;

	const gold_type&
		gold() const;

	gold_type&
		gold();

	void
		gold(const gold_type& x);

	static gold_type
		gold_default_value();

	// food
	//
	typedef ::xml_schema::integer food_type;
	typedef ::xsd::cxx::tree::traits< food_type, char > food_traits;

	const food_type&
		food() const;

	food_type&
		food();

	void
		food(const food_type& x);

	static food_type
		food_default_value();

	// population
	//
	typedef ::xml_schema::integer population_type;
	typedef ::xsd::cxx::tree::optional< population_type > population_optional;
	typedef ::xsd::cxx::tree::traits< population_type, char > population_traits;

	const population_optional&
		population() const;

	population_optional&
		population();

	void
		population(const population_type& x);

	void
		population(const population_optional& x);

	// maxpopulation
	//
	typedef ::xml_schema::integer maxpopulation_type;
	typedef ::xsd::cxx::tree::optional< maxpopulation_type > maxpopulation_optional;
	typedef ::xsd::cxx::tree::traits< maxpopulation_type, char > maxpopulation_traits;

	const maxpopulation_optional&
		maxpopulation() const;

	maxpopulation_optional&
		maxpopulation();

	void
		maxpopulation(const maxpopulation_type& x);

	void
		maxpopulation(const maxpopulation_optional& x);

	// healthperc
	//
	typedef ::xml_schema::integer healthperc_type;
	typedef ::xsd::cxx::tree::traits< healthperc_type, char > healthperc_traits;

	const healthperc_type&
		healthperc() const;

	healthperc_type&
		healthperc();

	void
		healthperc(const healthperc_type& x);

	static healthperc_type
		healthperc_default_value();

	// icon
	//
	typedef ::xml_schema::string icon_type;
	typedef ::xsd::cxx::tree::optional< icon_type > icon_optional;
	typedef ::xsd::cxx::tree::traits< icon_type, char > icon_traits;

	const icon_optional&
		icon() const;

	icon_optional&
		icon();

	void
		icon(const icon_type& x);

	void
		icon(const icon_optional& x);

	void
		icon(::std::auto_ptr< icon_type > p);

	// Constructors.
	//
	settlement(const class_type&,
		const id_type&,
		const player_type&,
		const x_type&,
		const y_type&);

	settlement(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	settlement(const settlement& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual settlement*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	settlement&
		operator= (const settlement& x);

	virtual
		~settlement();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	object_sequence object_;
	::xsd::cxx::tree::one< class_type > class__;
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< player_type > player_;
	::xsd::cxx::tree::one< x_type > x_;
	::xsd::cxx::tree::one< y_type > y_;
	name_optional name_;
	::xsd::cxx::tree::one< gold_type > gold_;
	::xsd::cxx::tree::one< food_type > food_;
	population_optional population_;
	maxpopulation_optional maxpopulation_;
	::xsd::cxx::tree::one< healthperc_type > healthperc_;
	icon_optional icon_;
};

class object1 : public ::xml_schema::type
{
public:
	// class
	//
	typedef ::xml_schema::string class_type;
	typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

	const class_type&
		class_() const;

	class_type&
		class_();

	void
		class_(const class_type& x);

	void
		class_(::std::auto_ptr< class_type > p);

	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// healthperc
	//
	typedef ::xml_schema::integer healthperc_type;
	typedef ::xsd::cxx::tree::traits< healthperc_type, char > healthperc_traits;

	const healthperc_type&
		healthperc() const;

	healthperc_type&
		healthperc();

	void
		healthperc(const healthperc_type& x);

	static healthperc_type
		healthperc_default_value();

	// player
	//
	typedef ::xml_schema::integer player_type;
	typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

	const player_type&
		player() const;

	player_type&
		player();

	void
		player(const player_type& x);

	// x
	//
	typedef ::xml_schema::integer x_type;
	typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

	const x_type&
		x() const;

	x_type&
		x();

	void
		x(const x_type& x);

	// y
	//
	typedef ::xml_schema::integer y_type;
	typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

	const y_type&
		y() const;

	y_type&
		y();

	void
		y(const y_type& x);

	// name
	//
	typedef ::xml_schema::string name_type;
	typedef ::xsd::cxx::tree::optional< name_type > name_optional;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_optional&
		name() const;

	name_optional&
		name();

	void
		name(const name_type& x);

	void
		name(const name_optional& x);

	void
		name(::std::auto_ptr< name_type > p);

	// icon
	//
	typedef ::xml_schema::string icon_type;
	typedef ::xsd::cxx::tree::optional< icon_type > icon_optional;
	typedef ::xsd::cxx::tree::traits< icon_type, char > icon_traits;

	const icon_optional&
		icon() const;

	icon_optional&
		icon();

	void
		icon(const icon_type& x);

	void
		icon(const icon_optional& x);

	void
		icon(::std::auto_ptr< icon_type > p);

	// Constructors.
	//
	object1(const class_type&,
		const id_type&,
		const player_type&,
		const x_type&,
		const y_type&);

	object1(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	object1(const object1& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual object1*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	object1&
		operator= (const object1& x);

	virtual
		~object1();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< class_type > class__;
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< healthperc_type > healthperc_;
	::xsd::cxx::tree::one< player_type > player_;
	::xsd::cxx::tree::one< x_type > x_;
	::xsd::cxx::tree::one< y_type > y_;
	name_optional name_;
	icon_optional icon_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(const ::std::string& uri,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(const ::std::string& uri,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(const ::std::string& uri,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse std::istream.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::std::istream& is,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::std::istream& is,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::std::istream& is,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::std::istream& is,
	const ::std::string& id,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::std::istream& is,
	const ::std::string& id,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::std::istream& is,
	const ::std::string& id,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::xercesc::InputSource& is,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::xercesc::InputSource& is,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::xercesc::InputSource& is,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(const ::xercesc::DOMDocument& d,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_mapObjects >
c_mapObjects_(::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
c_mapObjects_(::std::ostream& os,
	const ::c_mapObjects& x,
	const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(),
	const ::std::string& e = "UTF-8",
	::xml_schema::flags f = 0);

void
c_mapObjects_(::std::ostream& os,
	const ::c_mapObjects& x,
	::xml_schema::error_handler& eh,
	const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(),
	const ::std::string& e = "UTF-8",
	::xml_schema::flags f = 0);

void
c_mapObjects_(::std::ostream& os,
	const ::c_mapObjects& x,
	::xercesc::DOMErrorHandler& eh,
	const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(),
	const ::std::string& e = "UTF-8",
	::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
c_mapObjects_(::xercesc::XMLFormatTarget& ft,
	const ::c_mapObjects& x,
	const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(),
	const ::std::string& e = "UTF-8",
	::xml_schema::flags f = 0);

void
c_mapObjects_(::xercesc::XMLFormatTarget& ft,
	const ::c_mapObjects& x,
	::xml_schema::error_handler& eh,
	const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(),
	const ::std::string& e = "UTF-8",
	::xml_schema::flags f = 0);

void
c_mapObjects_(::xercesc::XMLFormatTarget& ft,
	const ::c_mapObjects& x,
	::xercesc::DOMErrorHandler& eh,
	const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(),
	const ::std::string& e = "UTF-8",
	::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
c_mapObjects_(::xercesc::DOMDocument& d,
	const ::c_mapObjects& x,
	::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
c_mapObjects_(const ::c_mapObjects& x,
	const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(),
	::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const c_mapObjects&);

void
operator<< (::xercesc::DOMElement&, const object&);

void
operator<< (::xercesc::DOMElement&, const settlement&);

void
operator<< (::xercesc::DOMElement&, const object1&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MAP_OBJECTS_HXX
