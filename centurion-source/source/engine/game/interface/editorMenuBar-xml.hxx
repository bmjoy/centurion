// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef EDITOR_MENU_BAR_HXX
#define EDITOR_MENU_BAR_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
	// anyType and anySimpleType.
	//
	typedef ::xsd::cxx::tree::type type;
	typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
	typedef ::xsd::cxx::tree::type container;

	// 8-bit
	//
	typedef signed char byte;
	typedef unsigned char unsigned_byte;

	// 16-bit
	//
	typedef short short_;
	typedef unsigned short unsigned_short;

	// 32-bit
	//
	typedef int int_;
	typedef unsigned int unsigned_int;

	// 64-bit
	//
	typedef long long long_;
	typedef unsigned long long unsigned_long;

	// Supposed to be arbitrary-length integral types.
	//
	typedef long long integer;
	typedef long long non_positive_integer;
	typedef unsigned long long non_negative_integer;
	typedef unsigned long long positive_integer;
	typedef long long negative_integer;

	// Boolean.
	//
	typedef bool boolean;

	// Floating-point types.
	//
	typedef float float_;
	typedef double double_;
	typedef double decimal;

	// String types.
	//
	typedef ::xsd::cxx::tree::string< char, simple_type > string;
	typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
	typedef ::xsd::cxx::tree::token< char, normalized_string > token;
	typedef ::xsd::cxx::tree::name< char, token > name;
	typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
	typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
	typedef ::xsd::cxx::tree::ncname< char, name > ncname;
	typedef ::xsd::cxx::tree::language< char, token > language;

	// ID/IDREF.
	//
	typedef ::xsd::cxx::tree::id< char, ncname > id;
	typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
	typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

	// URI.
	//
	typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

	// Qualified name.
	//
	typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

	// Binary.
	//
	typedef ::xsd::cxx::tree::buffer< char > buffer;
	typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
	typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

	// Date/time.
	//
	typedef ::xsd::cxx::tree::time_zone time_zone;
	typedef ::xsd::cxx::tree::date< char, simple_type > date;
	typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
	typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
	typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
	typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
	typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
	typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
	typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
	typedef ::xsd::cxx::tree::time< char, simple_type > time;

	// Entity.
	//
	typedef ::xsd::cxx::tree::entity< char, ncname > entity;
	typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

	typedef ::xsd::cxx::tree::content_order content_order;
	// Flags and properties.
	//
	typedef ::xsd::cxx::tree::flags flags;
	typedef ::xsd::cxx::tree::properties< char > properties;

	// Parsing/serialization diagnostics.
	//
	typedef ::xsd::cxx::tree::severity severity;
	typedef ::xsd::cxx::tree::error< char > error;
	typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

	// Exceptions.
	//
	typedef ::xsd::cxx::tree::exception< char > exception;
	typedef ::xsd::cxx::tree::bounds< char > bounds;
	typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
	typedef ::xsd::cxx::tree::parsing< char > parsing;
	typedef ::xsd::cxx::tree::expected_element< char > expected_element;
	typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
	typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
	typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
	typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
	typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

	// Error handler callback interface.
	//
	typedef ::xsd::cxx::xml::error_handler< char > error_handler;

	// DOM interaction.
	//
	namespace dom
	{
		// Automatic pointer for DOMDocument.
		//
		using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
		// DOM user data key for back pointers to tree nodes.
		//
		const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
	}
}

// Forward declarations.
//
class c_editorMenuBar;
class c_background;
class c_hover;
class c_editorMenu;
class command;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class c_editorMenuBar : public ::xml_schema::type
{
public:
	// c_background
	//
	typedef ::c_background c_background_type;
	typedef ::xsd::cxx::tree::traits< c_background_type, char > c_background_traits;

	const c_background_type&
		c_background() const;

	c_background_type&
		c_background();

	void
		c_background(const c_background_type& x);

	void
		c_background(::std::auto_ptr< c_background_type > p);

	// c_hover
	//
	typedef ::c_hover c_hover_type;
	typedef ::xsd::cxx::tree::traits< c_hover_type, char > c_hover_traits;

	const c_hover_type&
		c_hover() const;

	c_hover_type&
		c_hover();

	void
		c_hover(const c_hover_type& x);

	void
		c_hover(::std::auto_ptr< c_hover_type > p);

	// c_editorMenu
	//
	typedef ::c_editorMenu c_editorMenu_type;
	typedef ::xsd::cxx::tree::sequence< c_editorMenu_type > c_editorMenu_sequence;
	typedef c_editorMenu_sequence::iterator c_editorMenu_iterator;
	typedef c_editorMenu_sequence::const_iterator c_editorMenu_const_iterator;
	typedef ::xsd::cxx::tree::traits< c_editorMenu_type, char > c_editorMenu_traits;

	const c_editorMenu_sequence&
		c_editorMenu() const;

	c_editorMenu_sequence&
		c_editorMenu();

	void
		c_editorMenu(const c_editorMenu_sequence& s);

	// height
	//
	typedef ::xml_schema::integer height_type;
	typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

	const height_type&
		height() const;

	height_type&
		height();

	void
		height(const height_type& x);

	// font
	//
	typedef ::xml_schema::string font_type;
	typedef ::xsd::cxx::tree::traits< font_type, char > font_traits;

	const font_type&
		font() const;

	font_type&
		font();

	void
		font(const font_type& x);

	void
		font(::std::auto_ptr< font_type > p);

	// Constructors.
	//
	c_editorMenuBar(const c_background_type&,
		const c_hover_type&,
		const height_type&,
		const font_type&);

	c_editorMenuBar(::std::auto_ptr< c_background_type >,
		::std::auto_ptr< c_hover_type >,
		const height_type&,
		const font_type&);

	c_editorMenuBar(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	c_editorMenuBar(const c_editorMenuBar& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual c_editorMenuBar*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	c_editorMenuBar&
		operator= (const c_editorMenuBar& x);

	virtual
		~c_editorMenuBar();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< c_background_type > c_background_;
	::xsd::cxx::tree::one< c_hover_type > c_hover_;
	c_editorMenu_sequence c_editorMenu_;
	::xsd::cxx::tree::one< height_type > height_;
	::xsd::cxx::tree::one< font_type > font_;
};

class c_background : public ::xml_schema::type
{
public:
	// r
	//
	typedef ::xml_schema::integer r_type;
	typedef ::xsd::cxx::tree::traits< r_type, char > r_traits;

	const r_type&
		r() const;

	r_type&
		r();

	void
		r(const r_type& x);

	// g
	//
	typedef ::xml_schema::integer g_type;
	typedef ::xsd::cxx::tree::traits< g_type, char > g_traits;

	const g_type&
		g() const;

	g_type&
		g();

	void
		g(const g_type& x);

	// b
	//
	typedef ::xml_schema::integer b_type;
	typedef ::xsd::cxx::tree::traits< b_type, char > b_traits;

	const b_type&
		b() const;

	b_type&
		b();

	void
		b(const b_type& x);

	// Constructors.
	//
	c_background(const r_type&,
		const g_type&,
		const b_type&);

	c_background(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	c_background(const c_background& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual c_background*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	c_background&
		operator= (const c_background& x);

	virtual
		~c_background();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< r_type > r_;
	::xsd::cxx::tree::one< g_type > g_;
	::xsd::cxx::tree::one< b_type > b_;
};

class c_hover : public ::xml_schema::type
{
public:
	// r
	//
	typedef ::xml_schema::integer r_type;
	typedef ::xsd::cxx::tree::traits< r_type, char > r_traits;

	const r_type&
		r() const;

	r_type&
		r();

	void
		r(const r_type& x);

	// g
	//
	typedef ::xml_schema::integer g_type;
	typedef ::xsd::cxx::tree::traits< g_type, char > g_traits;

	const g_type&
		g() const;

	g_type&
		g();

	void
		g(const g_type& x);

	// b
	//
	typedef ::xml_schema::integer b_type;
	typedef ::xsd::cxx::tree::traits< b_type, char > b_traits;

	const b_type&
		b() const;

	b_type&
		b();

	void
		b(const b_type& x);

	// Constructors.
	//
	c_hover(const r_type&,
		const g_type&,
		const b_type&);

	c_hover(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	c_hover(const c_hover& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual c_hover*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	c_hover&
		operator= (const c_hover& x);

	virtual
		~c_hover();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< r_type > r_;
	::xsd::cxx::tree::one< g_type > g_;
	::xsd::cxx::tree::one< b_type > b_;
};

class c_editorMenu : public ::xml_schema::type
{
public:
	// command
	//
	typedef ::command command_type;
	typedef ::xsd::cxx::tree::sequence< command_type > command_sequence;
	typedef command_sequence::iterator command_iterator;
	typedef command_sequence::const_iterator command_const_iterator;
	typedef ::xsd::cxx::tree::traits< command_type, char > command_traits;

	const command_sequence&
		command() const;

	command_sequence&
		command();

	void
		command(const command_sequence& s);

	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// name
	//
	typedef ::xml_schema::string name_type;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_type&
		name() const;

	name_type&
		name();

	void
		name(const name_type& x);

	void
		name(::std::auto_ptr< name_type > p);

	// onclick
	//
	typedef ::xml_schema::string onclick_type;
	typedef ::xsd::cxx::tree::traits< onclick_type, char > onclick_traits;

	const onclick_type&
		onclick() const;

	onclick_type&
		onclick();

	void
		onclick(const onclick_type& x);

	void
		onclick(::std::auto_ptr< onclick_type > p);

	// Constructors.
	//
	c_editorMenu(const id_type&,
		const name_type&,
		const onclick_type&);

	c_editorMenu(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	c_editorMenu(const c_editorMenu& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual c_editorMenu*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	c_editorMenu&
		operator= (const c_editorMenu& x);

	virtual
		~c_editorMenu();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	command_sequence command_;
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< name_type > name_;
	::xsd::cxx::tree::one< onclick_type > onclick_;
};

class command : public ::xml_schema::type
{
public:
	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// name
	//
	typedef ::xml_schema::string name_type;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_type&
		name() const;

	name_type&
		name();

	void
		name(const name_type& x);

	void
		name(::std::auto_ptr< name_type > p);

	// hotkey1
	//
	typedef ::xml_schema::string hotkey1_type;
	typedef ::xsd::cxx::tree::traits< hotkey1_type, char > hotkey1_traits;

	const hotkey1_type&
		hotkey1() const;

	hotkey1_type&
		hotkey1();

	void
		hotkey1(const hotkey1_type& x);

	void
		hotkey1(::std::auto_ptr< hotkey1_type > p);

	// hotkey2
	//
	typedef ::xml_schema::string hotkey2_type;
	typedef ::xsd::cxx::tree::traits< hotkey2_type, char > hotkey2_traits;

	const hotkey2_type&
		hotkey2() const;

	hotkey2_type&
		hotkey2();

	void
		hotkey2(const hotkey2_type& x);

	void
		hotkey2(::std::auto_ptr< hotkey2_type > p);

	// hotkey3
	//
	typedef ::xml_schema::string hotkey3_type;
	typedef ::xsd::cxx::tree::traits< hotkey3_type, char > hotkey3_traits;

	const hotkey3_type&
		hotkey3() const;

	hotkey3_type&
		hotkey3();

	void
		hotkey3(const hotkey3_type& x);

	void
		hotkey3(::std::auto_ptr< hotkey3_type > p);

	// onclick
	//
	typedef ::xml_schema::string onclick_type;
	typedef ::xsd::cxx::tree::traits< onclick_type, char > onclick_traits;

	const onclick_type&
		onclick() const;

	onclick_type&
		onclick();

	void
		onclick(const onclick_type& x);

	void
		onclick(::std::auto_ptr< onclick_type > p);

	// Constructors.
	//
	command(const id_type&,
		const name_type&,
		const hotkey1_type&,
		const hotkey2_type&,
		const hotkey3_type&,
		const onclick_type&);

	command(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	command(const command& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual command*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	command&
		operator= (const command& x);

	virtual
		~command();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< name_type > name_;
	::xsd::cxx::tree::one< hotkey1_type > hotkey1_;
	::xsd::cxx::tree::one< hotkey2_type > hotkey2_;
	::xsd::cxx::tree::one< hotkey3_type > hotkey3_;
	::xsd::cxx::tree::one< onclick_type > onclick_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(const ::std::string& uri,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(const ::std::string& uri,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(const ::std::string& uri,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse std::istream.
//

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::std::istream& is,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::std::istream& is,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::std::istream& is,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::std::istream& is,
	const ::std::string& id,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::std::istream& is,
	const ::std::string& id,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::std::istream& is,
	const ::std::string& id,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::xercesc::InputSource& is,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::xercesc::InputSource& is,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::xercesc::InputSource& is,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(const ::xercesc::DOMDocument& d,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_editorMenuBar >
c_editorMenuBar_(::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EDITOR_MENU_BAR_HXX
