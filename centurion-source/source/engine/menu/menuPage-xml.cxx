// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "menuPage-xml.hxx"

// c_menuPage
// 

const c_menuPage::c_buttons_type& c_menuPage::
c_buttons () const
{
  return this->c_buttons_.get ();
}

c_menuPage::c_buttons_type& c_menuPage::
c_buttons ()
{
  return this->c_buttons_.get ();
}

void c_menuPage::
c_buttons (const c_buttons_type& x)
{
  this->c_buttons_.set (x);
}

void c_menuPage::
c_buttons (::std::auto_ptr< c_buttons_type > x)
{
  this->c_buttons_.set (x);
}

const c_menuPage::c_images_type& c_menuPage::
c_images () const
{
  return this->c_images_.get ();
}

c_menuPage::c_images_type& c_menuPage::
c_images ()
{
  return this->c_images_.get ();
}

void c_menuPage::
c_images (const c_images_type& x)
{
  this->c_images_.set (x);
}

void c_menuPage::
c_images (::std::auto_ptr< c_images_type > x)
{
  this->c_images_.set (x);
}

const c_menuPage::id_type& c_menuPage::
id () const
{
  return this->id_.get ();
}

c_menuPage::id_type& c_menuPage::
id ()
{
  return this->id_.get ();
}

void c_menuPage::
id (const id_type& x)
{
  this->id_.set (x);
}

const c_menuPage::name_type& c_menuPage::
name () const
{
  return this->name_.get ();
}

c_menuPage::name_type& c_menuPage::
name ()
{
  return this->name_.get ();
}

void c_menuPage::
name (const name_type& x)
{
  this->name_.set (x);
}

void c_menuPage::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// c_buttons
// 

const c_buttons::c_button_sequence& c_buttons::
c_button () const
{
  return this->c_button_;
}

c_buttons::c_button_sequence& c_buttons::
c_button ()
{
  return this->c_button_;
}

void c_buttons::
c_button (const c_button_sequence& s)
{
  this->c_button_ = s;
}


// c_images
// 

const c_images::c_image_sequence& c_images::
c_image () const
{
  return this->c_image_;
}

c_images::c_image_sequence& c_images::
c_image ()
{
  return this->c_image_;
}

void c_images::
c_image (const c_image_sequence& s)
{
  this->c_image_ = s;
}


// c_button
// 

const c_button::name_type& c_button::
name () const
{
  return this->name_.get ();
}

c_button::name_type& c_button::
name ()
{
  return this->name_.get ();
}

void c_button::
name (const name_type& x)
{
  this->name_.set (x);
}

void c_button::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const c_button::image_name_type& c_button::
image_name () const
{
  return this->image_name_.get ();
}

c_button::image_name_type& c_button::
image_name ()
{
  return this->image_name_.get ();
}

void c_button::
image_name (const image_name_type& x)
{
  this->image_name_.set (x);
}

void c_button::
image_name (::std::auto_ptr< image_name_type > x)
{
  this->image_name_.set (x);
}

const c_button::x_type& c_button::
x () const
{
  return this->x_.get ();
}

c_button::x_type& c_button::
x ()
{
  return this->x_.get ();
}

void c_button::
x (const x_type& x)
{
  this->x_.set (x);
}

const c_button::y_type& c_button::
y () const
{
  return this->y_.get ();
}

c_button::y_type& c_button::
y ()
{
  return this->y_.get ();
}

void c_button::
y (const y_type& x)
{
  this->y_.set (x);
}

const c_button::onclick_type& c_button::
onclick () const
{
  return this->onclick_.get ();
}

c_button::onclick_type& c_button::
onclick ()
{
  return this->onclick_.get ();
}

void c_button::
onclick (const onclick_type& x)
{
  this->onclick_.set (x);
}

void c_button::
onclick (::std::auto_ptr< onclick_type > x)
{
  this->onclick_.set (x);
}


// c_image
// 

const c_image::name_type& c_image::
name () const
{
  return this->name_.get ();
}

c_image::name_type& c_image::
name ()
{
  return this->name_.get ();
}

void c_image::
name (const name_type& x)
{
  this->name_.set (x);
}

void c_image::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const c_image::image_name_type& c_image::
image_name () const
{
  return this->image_name_.get ();
}

c_image::image_name_type& c_image::
image_name ()
{
  return this->image_name_.get ();
}

void c_image::
image_name (const image_name_type& x)
{
  this->image_name_.set (x);
}

void c_image::
image_name (::std::auto_ptr< image_name_type > x)
{
  this->image_name_.set (x);
}

const c_image::onclick_type& c_image::
onclick () const
{
  return this->onclick_.get ();
}

c_image::onclick_type& c_image::
onclick ()
{
  return this->onclick_.get ();
}

void c_image::
onclick (const onclick_type& x)
{
  this->onclick_.set (x);
}

void c_image::
onclick (::std::auto_ptr< onclick_type > x)
{
  this->onclick_.set (x);
}

const c_image::x_type& c_image::
x () const
{
  return this->x_.get ();
}

c_image::x_type& c_image::
x ()
{
  return this->x_.get ();
}

void c_image::
x (const x_type& x)
{
  this->x_.set (x);
}

const c_image::y_type& c_image::
y () const
{
  return this->y_.get ();
}

c_image::y_type& c_image::
y ()
{
  return this->y_.get ();
}

void c_image::
y (const y_type& x)
{
  this->y_.set (x);
}

const c_image::size_type& c_image::
size () const
{
  return this->size_.get ();
}

c_image::size_type& c_image::
size ()
{
  return this->size_.get ();
}

void c_image::
size (const size_type& x)
{
  this->size_.set (x);
}

void c_image::
size (::std::auto_ptr< size_type > x)
{
  this->size_.set (x);
}

const c_image::align_type& c_image::
align () const
{
  return this->align_.get ();
}

c_image::align_type& c_image::
align ()
{
  return this->align_.get ();
}

void c_image::
align (const align_type& x)
{
  this->align_.set (x);
}

void c_image::
align (::std::auto_ptr< align_type > x)
{
  this->align_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// c_menuPage
//

c_menuPage::
c_menuPage (const c_buttons_type& c_buttons,
            const c_images_type& c_images,
            const id_type& id,
            const name_type& name)
: ::xml_schema::type (),
  c_buttons_ (c_buttons, this),
  c_images_ (c_images, this),
  id_ (id, this),
  name_ (name, this)
{
}

c_menuPage::
c_menuPage (::std::auto_ptr< c_buttons_type > c_buttons,
            ::std::auto_ptr< c_images_type > c_images,
            const id_type& id,
            const name_type& name)
: ::xml_schema::type (),
  c_buttons_ (c_buttons, this),
  c_images_ (c_images, this),
  id_ (id, this),
  name_ (name, this)
{
}

c_menuPage::
c_menuPage (const c_menuPage& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  c_buttons_ (x.c_buttons_, f, this),
  c_images_ (x.c_images_, f, this),
  id_ (x.id_, f, this),
  name_ (x.name_, f, this)
{
}

c_menuPage::
c_menuPage (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  c_buttons_ (this),
  c_images_ (this),
  id_ (this),
  name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void c_menuPage::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // c_buttons
    //
    if (n.name () == "c_buttons" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< c_buttons_type > r (
        c_buttons_traits::create (i, f, this));

      if (!c_buttons_.present ())
      {
        this->c_buttons_.set (r);
        continue;
      }
    }

    // c_images
    //
    if (n.name () == "c_images" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< c_images_type > r (
        c_images_traits::create (i, f, this));

      if (!c_images_.present ())
      {
        this->c_images_.set (r);
        continue;
      }
    }

    break;
  }

  if (!c_buttons_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "c_buttons",
      "");
  }

  if (!c_images_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "c_images",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      this->id_.set (id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "id",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

c_menuPage* c_menuPage::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class c_menuPage (*this, f, c);
}

c_menuPage& c_menuPage::
operator= (const c_menuPage& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->c_buttons_ = x.c_buttons_;
    this->c_images_ = x.c_images_;
    this->id_ = x.id_;
    this->name_ = x.name_;
  }

  return *this;
}

c_menuPage::
~c_menuPage ()
{
}

// c_buttons
//

c_buttons::
c_buttons ()
: ::xml_schema::type (),
  c_button_ (this)
{
}

c_buttons::
c_buttons (const c_buttons& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  c_button_ (x.c_button_, f, this)
{
}

c_buttons::
c_buttons (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  c_button_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void c_buttons::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // c_button
    //
    if (n.name () == "c_button" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< c_button_type > r (
        c_button_traits::create (i, f, this));

      this->c_button_.push_back (r);
      continue;
    }

    break;
  }
}

c_buttons* c_buttons::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class c_buttons (*this, f, c);
}

c_buttons& c_buttons::
operator= (const c_buttons& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->c_button_ = x.c_button_;
  }

  return *this;
}

c_buttons::
~c_buttons ()
{
}

// c_images
//

c_images::
c_images ()
: ::xml_schema::type (),
  c_image_ (this)
{
}

c_images::
c_images (const c_images& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  c_image_ (x.c_image_, f, this)
{
}

c_images::
c_images (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  c_image_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void c_images::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // c_image
    //
    if (n.name () == "c_image" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< c_image_type > r (
        c_image_traits::create (i, f, this));

      this->c_image_.push_back (r);
      continue;
    }

    break;
  }
}

c_images* c_images::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class c_images (*this, f, c);
}

c_images& c_images::
operator= (const c_images& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->c_image_ = x.c_image_;
  }

  return *this;
}

c_images::
~c_images ()
{
}

// c_button
//

c_button::
c_button (const name_type& name,
          const image_name_type& image_name,
          const x_type& x,
          const y_type& y,
          const onclick_type& onclick)
: ::xml_schema::type (),
  name_ (name, this),
  image_name_ (image_name, this),
  x_ (x, this),
  y_ (y, this),
  onclick_ (onclick, this)
{
}

c_button::
c_button (const c_button& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  image_name_ (x.image_name_, f, this),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  onclick_ (x.onclick_, f, this)
{
}

c_button::
c_button (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (this),
  image_name_ (this),
  x_ (this),
  y_ (this),
  onclick_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void c_button::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "image_name" && n.namespace_ ().empty ())
    {
      this->image_name_.set (image_name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (x_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "onclick" && n.namespace_ ().empty ())
    {
      this->onclick_.set (onclick_traits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!image_name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "image_name",
      "");
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y",
      "");
  }

  if (!onclick_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "onclick",
      "");
  }
}

c_button* c_button::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class c_button (*this, f, c);
}

c_button& c_button::
operator= (const c_button& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->name_ = x.name_;
    this->image_name_ = x.image_name_;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->onclick_ = x.onclick_;
  }

  return *this;
}

c_button::
~c_button ()
{
}

// c_image
//

c_image::
c_image (const name_type& name,
         const image_name_type& image_name,
         const onclick_type& onclick,
         const x_type& x,
         const y_type& y,
         const size_type& size,
         const align_type& align)
: ::xml_schema::type (),
  name_ (name, this),
  image_name_ (image_name, this),
  onclick_ (onclick, this),
  x_ (x, this),
  y_ (y, this),
  size_ (size, this),
  align_ (align, this)
{
}

c_image::
c_image (const c_image& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  image_name_ (x.image_name_, f, this),
  onclick_ (x.onclick_, f, this),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  size_ (x.size_, f, this),
  align_ (x.align_, f, this)
{
}

c_image::
c_image (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (this),
  image_name_ (this),
  onclick_ (this),
  x_ (this),
  y_ (this),
  size_ (this),
  align_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void c_image::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "image_name" && n.namespace_ ().empty ())
    {
      this->image_name_.set (image_name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "onclick" && n.namespace_ ().empty ())
    {
      this->onclick_.set (onclick_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (x_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "size" && n.namespace_ ().empty ())
    {
      this->size_.set (size_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "align" && n.namespace_ ().empty ())
    {
      this->align_.set (align_traits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!image_name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "image_name",
      "");
  }

  if (!onclick_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "onclick",
      "");
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y",
      "");
  }

  if (!size_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "size",
      "");
  }

  if (!align_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "align",
      "");
  }
}

c_image* c_image::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class c_image (*this, f, c);
}

c_image& c_image::
operator= (const c_image& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->name_ = x.name_;
    this->image_name_ = x.image_name_;
    this->onclick_ = x.onclick_;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->size_ = x.size_;
    this->align_ = x.align_;
  }

  return *this;
}

c_image::
~c_image ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::c_menuPage > (
    ::c_menuPage_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::c_menuPage > (
    ::c_menuPage_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::c_menuPage > (
    ::c_menuPage_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::c_menuPage_ (isrc, f, p);
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::c_menuPage_ (isrc, h, f, p);
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::c_menuPage_ (isrc, h, f, p);
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::c_menuPage_ (isrc, f, p);
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::c_menuPage_ (isrc, h, f, p);
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::c_menuPage_ (isrc, h, f, p);
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::c_menuPage > (
    ::c_menuPage_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::c_menuPage > (
    ::c_menuPage_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::c_menuPage > (
    ::c_menuPage_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::c_menuPage > (
      ::c_menuPage_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "c_menuPage" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::c_menuPage > r (
      ::xsd::cxx::tree::traits< ::c_menuPage, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "c_menuPage",
    "");
}

::std::auto_ptr< ::c_menuPage >
c_menuPage_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "c_menuPage" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::c_menuPage > r (
      ::xsd::cxx::tree::traits< ::c_menuPage, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "c_menuPage",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

