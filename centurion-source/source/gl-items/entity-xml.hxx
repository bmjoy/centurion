// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef ENTITY_HXX
#define ENTITY_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
	// anyType and anySimpleType.
	//
	typedef ::xsd::cxx::tree::type type;
	typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
	typedef ::xsd::cxx::tree::type container;

	// 8-bit
	//
	typedef signed char byte;
	typedef unsigned char unsigned_byte;

	// 16-bit
	//
	typedef short short_;
	typedef unsigned short unsigned_short;

	// 32-bit
	//
	typedef int int_;
	typedef unsigned int unsigned_int;

	// 64-bit
	//
	typedef long long long_;
	typedef unsigned long long unsigned_long;

	// Supposed to be arbitrary-length integral types.
	//
	typedef long long integer;
	typedef long long non_positive_integer;
	typedef unsigned long long non_negative_integer;
	typedef unsigned long long positive_integer;
	typedef long long negative_integer;

	// Boolean.
	//
	typedef bool boolean;

	// Floating-point types.
	//
	typedef float float_;
	typedef double double_;
	typedef double decimal;

	// String types.
	//
	typedef ::xsd::cxx::tree::string< char, simple_type > string;
	typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
	typedef ::xsd::cxx::tree::token< char, normalized_string > token;
	typedef ::xsd::cxx::tree::name< char, token > name;
	typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
	typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
	typedef ::xsd::cxx::tree::ncname< char, name > ncname;
	typedef ::xsd::cxx::tree::language< char, token > language;

	// ID/IDREF.
	//
	typedef ::xsd::cxx::tree::id< char, ncname > id;
	typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
	typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

	// URI.
	//
	typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

	// Qualified name.
	//
	typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

	// Binary.
	//
	typedef ::xsd::cxx::tree::buffer< char > buffer;
	typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
	typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

	// Date/time.
	//
	typedef ::xsd::cxx::tree::time_zone time_zone;
	typedef ::xsd::cxx::tree::date< char, simple_type > date;
	typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
	typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
	typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
	typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
	typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
	typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
	typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
	typedef ::xsd::cxx::tree::time< char, simple_type > time;

	// Entity.
	//
	typedef ::xsd::cxx::tree::entity< char, ncname > entity;
	typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

	typedef ::xsd::cxx::tree::content_order content_order;
	// Flags and properties.
	//
	typedef ::xsd::cxx::tree::flags flags;
	typedef ::xsd::cxx::tree::properties< char > properties;

	// Parsing/serialization diagnostics.
	//
	typedef ::xsd::cxx::tree::severity severity;
	typedef ::xsd::cxx::tree::error< char > error;
	typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

	// Exceptions.
	//
	typedef ::xsd::cxx::tree::exception< char > exception;
	typedef ::xsd::cxx::tree::bounds< char > bounds;
	typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
	typedef ::xsd::cxx::tree::parsing< char > parsing;
	typedef ::xsd::cxx::tree::expected_element< char > expected_element;
	typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
	typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
	typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
	typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
	typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

	// Error handler callback interface.
	//
	typedef ::xsd::cxx::xml::error_handler< char > error_handler;

	// DOM interaction.
	//
	namespace dom
	{
		// Automatic pointer for DOMDocument.
		//
		using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
		// DOM user data key for back pointers to tree nodes.
		//
		const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
	}
}

// Forward declarations.
//
class c_entity;
class ent_properties;
class ent_points;
class ent_images;
class ent_layers;
class ent_animations;
class ent_property;
class ent_point;
class ent_image;
class ent_layer;
class ent_animation;
class replace;
class frame;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class c_entity : public ::xml_schema::type
{
public:
	// ent_properties
	//
	typedef ::ent_properties ent_properties_type;
	typedef ::xsd::cxx::tree::traits< ent_properties_type, char > ent_properties_traits;

	const ent_properties_type&
		ent_properties() const;

	ent_properties_type&
		ent_properties();

	void
		ent_properties(const ent_properties_type& x);

	void
		ent_properties(::std::auto_ptr< ent_properties_type > p);

	// ent_points
	//
	typedef ::ent_points ent_points_type;
	typedef ::xsd::cxx::tree::traits< ent_points_type, char > ent_points_traits;

	const ent_points_type&
		ent_points() const;

	ent_points_type&
		ent_points();

	void
		ent_points(const ent_points_type& x);

	void
		ent_points(::std::auto_ptr< ent_points_type > p);

	// ent_images
	//
	typedef ::ent_images ent_images_type;
	typedef ::xsd::cxx::tree::traits< ent_images_type, char > ent_images_traits;

	const ent_images_type&
		ent_images() const;

	ent_images_type&
		ent_images();

	void
		ent_images(const ent_images_type& x);

	void
		ent_images(::std::auto_ptr< ent_images_type > p);

	// ent_layers
	//
	typedef ::ent_layers ent_layers_type;
	typedef ::xsd::cxx::tree::traits< ent_layers_type, char > ent_layers_traits;

	const ent_layers_type&
		ent_layers() const;

	ent_layers_type&
		ent_layers();

	void
		ent_layers(const ent_layers_type& x);

	void
		ent_layers(::std::auto_ptr< ent_layers_type > p);

	// ent_animations
	//
	typedef ::ent_animations ent_animations_type;
	typedef ::xsd::cxx::tree::traits< ent_animations_type, char > ent_animations_traits;

	const ent_animations_type&
		ent_animations() const;

	ent_animations_type&
		ent_animations();

	void
		ent_animations(const ent_animations_type& x);

	void
		ent_animations(::std::auto_ptr< ent_animations_type > p);

	// class_name
	//
	typedef ::xml_schema::string class_name_type;
	typedef ::xsd::cxx::tree::traits< class_name_type, char > class_name_traits;

	const class_name_type&
		class_name() const;

	class_name_type&
		class_name();

	void
		class_name(const class_name_type& x);

	void
		class_name(::std::auto_ptr< class_name_type > p);

	// type
	//
	typedef ::xml_schema::string type_type;
	typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

	const type_type&
		type() const;

	type_type&
		type();

	void
		type(const type_type& x);

	void
		type(::std::auto_ptr< type_type > p);

	// directions
	//
	typedef ::xml_schema::integer directions_type;
	typedef ::xsd::cxx::tree::traits< directions_type, char > directions_traits;

	const directions_type&
		directions() const;

	directions_type&
		directions();

	void
		directions(const directions_type& x);

	// Constructors.
	//
	c_entity(const ent_properties_type&,
		const ent_points_type&,
		const ent_images_type&,
		const ent_layers_type&,
		const ent_animations_type&,
		const class_name_type&,
		const type_type&,
		const directions_type&);

	c_entity(::std::auto_ptr< ent_properties_type >,
		::std::auto_ptr< ent_points_type >,
		::std::auto_ptr< ent_images_type >,
		::std::auto_ptr< ent_layers_type >,
		::std::auto_ptr< ent_animations_type >,
		const class_name_type&,
		const type_type&,
		const directions_type&);

	c_entity(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	c_entity(const c_entity& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual c_entity*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	c_entity&
		operator= (const c_entity& x);

	virtual
		~c_entity();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< ent_properties_type > ent_properties_;
	::xsd::cxx::tree::one< ent_points_type > ent_points_;
	::xsd::cxx::tree::one< ent_images_type > ent_images_;
	::xsd::cxx::tree::one< ent_layers_type > ent_layers_;
	::xsd::cxx::tree::one< ent_animations_type > ent_animations_;
	::xsd::cxx::tree::one< class_name_type > class_name_;
	::xsd::cxx::tree::one< type_type > type_;
	::xsd::cxx::tree::one< directions_type > directions_;
};

class ent_properties : public ::xml_schema::type
{
public:
	// ent_property
	//
	typedef ::ent_property ent_property_type;
	typedef ::xsd::cxx::tree::sequence< ent_property_type > ent_property_sequence;
	typedef ent_property_sequence::iterator ent_property_iterator;
	typedef ent_property_sequence::const_iterator ent_property_const_iterator;
	typedef ::xsd::cxx::tree::traits< ent_property_type, char > ent_property_traits;

	const ent_property_sequence&
		ent_property() const;

	ent_property_sequence&
		ent_property();

	void
		ent_property(const ent_property_sequence& s);

	// Constructors.
	//
	ent_properties();

	ent_properties(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_properties(const ent_properties& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_properties*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_properties&
		operator= (const ent_properties& x);

	virtual
		~ent_properties();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	ent_property_sequence ent_property_;
};

class ent_points : public ::xml_schema::type
{
public:
	// ent_point
	//
	typedef ::ent_point ent_point_type;
	typedef ::xsd::cxx::tree::sequence< ent_point_type > ent_point_sequence;
	typedef ent_point_sequence::iterator ent_point_iterator;
	typedef ent_point_sequence::const_iterator ent_point_const_iterator;
	typedef ::xsd::cxx::tree::traits< ent_point_type, char > ent_point_traits;

	const ent_point_sequence&
		ent_point() const;

	ent_point_sequence&
		ent_point();

	void
		ent_point(const ent_point_sequence& s);

	// Constructors.
	//
	ent_points();

	ent_points(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_points(const ent_points& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_points*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_points&
		operator= (const ent_points& x);

	virtual
		~ent_points();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	ent_point_sequence ent_point_;
};

class ent_images : public ::xml_schema::type
{
public:
	// ent_image
	//
	typedef ::ent_image ent_image_type;
	typedef ::xsd::cxx::tree::sequence< ent_image_type > ent_image_sequence;
	typedef ent_image_sequence::iterator ent_image_iterator;
	typedef ent_image_sequence::const_iterator ent_image_const_iterator;
	typedef ::xsd::cxx::tree::traits< ent_image_type, char > ent_image_traits;

	const ent_image_sequence&
		ent_image() const;

	ent_image_sequence&
		ent_image();

	void
		ent_image(const ent_image_sequence& s);

	// Constructors.
	//
	ent_images();

	ent_images(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_images(const ent_images& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_images*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_images&
		operator= (const ent_images& x);

	virtual
		~ent_images();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	ent_image_sequence ent_image_;
};

class ent_layers : public ::xml_schema::type
{
public:
	// ent_layer
	//
	typedef ::ent_layer ent_layer_type;
	typedef ::xsd::cxx::tree::sequence< ent_layer_type > ent_layer_sequence;
	typedef ent_layer_sequence::iterator ent_layer_iterator;
	typedef ent_layer_sequence::const_iterator ent_layer_const_iterator;
	typedef ::xsd::cxx::tree::traits< ent_layer_type, char > ent_layer_traits;

	const ent_layer_sequence&
		ent_layer() const;

	ent_layer_sequence&
		ent_layer();

	void
		ent_layer(const ent_layer_sequence& s);

	// Constructors.
	//
	ent_layers();

	ent_layers(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_layers(const ent_layers& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_layers*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_layers&
		operator= (const ent_layers& x);

	virtual
		~ent_layers();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	ent_layer_sequence ent_layer_;
};

class ent_animations : public ::xml_schema::type
{
public:
	// ent_animation
	//
	typedef ::ent_animation ent_animation_type;
	typedef ::xsd::cxx::tree::sequence< ent_animation_type > ent_animation_sequence;
	typedef ent_animation_sequence::iterator ent_animation_iterator;
	typedef ent_animation_sequence::const_iterator ent_animation_const_iterator;
	typedef ::xsd::cxx::tree::traits< ent_animation_type, char > ent_animation_traits;

	const ent_animation_sequence&
		ent_animation() const;

	ent_animation_sequence&
		ent_animation();

	void
		ent_animation(const ent_animation_sequence& s);

	// Constructors.
	//
	ent_animations();

	ent_animations(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_animations(const ent_animations& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_animations*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_animations&
		operator= (const ent_animations& x);

	virtual
		~ent_animations();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	ent_animation_sequence ent_animation_;
};

class ent_property : public ::xml_schema::type
{
public:
	// name
	//
	typedef ::xml_schema::integer name_type;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_type&
		name() const;

	name_type&
		name();

	void
		name(const name_type& x);

	// value
	//
	typedef ::xml_schema::integer value_type;
	typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

	const value_type&
		value() const;

	value_type&
		value();

	void
		value(const value_type& x);

	// Constructors.
	//
	ent_property(const name_type&,
		const value_type&);

	ent_property(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_property(const ent_property& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_property*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_property&
		operator= (const ent_property& x);

	virtual
		~ent_property();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< name_type > name_;
	::xsd::cxx::tree::one< value_type > value_;
};

class ent_point : public ::xml_schema::type
{
public:
	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// type
	//
	typedef ::xml_schema::integer type_type;
	typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

	const type_type&
		type() const;

	type_type&
		type();

	void
		type(const type_type& x);

	// x
	//
	typedef ::xml_schema::integer x_type;
	typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

	const x_type&
		x() const;

	x_type&
		x();

	void
		x(const x_type& x);

	// y
	//
	typedef ::xml_schema::integer y_type;
	typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

	const y_type&
		y() const;

	y_type&
		y();

	void
		y(const y_type& x);

	// Constructors.
	//
	ent_point(const id_type&,
		const type_type&,
		const x_type&,
		const y_type&);

	ent_point(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_point(const ent_point& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_point*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_point&
		operator= (const ent_point& x);

	virtual
		~ent_point();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< type_type > type_;
	::xsd::cxx::tree::one< x_type > x_;
	::xsd::cxx::tree::one< y_type > y_;
};

class ent_image : public ::xml_schema::type
{
public:
	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// file
	//
	typedef ::xml_schema::string file_type;
	typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

	const file_type&
		file() const;

	file_type&
		file();

	void
		file(const file_type& x);

	void
		file(::std::auto_ptr< file_type > p);

	// drawmode
	//
	typedef ::xml_schema::string drawmode_type;
	typedef ::xsd::cxx::tree::traits< drawmode_type, char > drawmode_traits;

	const drawmode_type&
		drawmode() const;

	drawmode_type&
		drawmode();

	void
		drawmode(const drawmode_type& x);

	void
		drawmode(::std::auto_ptr< drawmode_type > p);

	// reverse
	//
	typedef ::xml_schema::boolean reverse_type;
	typedef ::xsd::cxx::tree::traits< reverse_type, char > reverse_traits;

	const reverse_type&
		reverse() const;

	reverse_type&
		reverse();

	void
		reverse(const reverse_type& x);

	// frames
	//
	typedef ::xml_schema::integer frames_type;
	typedef ::xsd::cxx::tree::traits< frames_type, char > frames_traits;

	const frames_type&
		frames() const;

	frames_type&
		frames();

	void
		frames(const frames_type& x);

	// Constructors.
	//
	ent_image(const id_type&,
		const file_type&,
		const drawmode_type&,
		const reverse_type&,
		const frames_type&);

	ent_image(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_image(const ent_image& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_image*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_image&
		operator= (const ent_image& x);

	virtual
		~ent_image();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< file_type > file_;
	::xsd::cxx::tree::one< drawmode_type > drawmode_;
	::xsd::cxx::tree::one< reverse_type > reverse_;
	::xsd::cxx::tree::one< frames_type > frames_;
};

class ent_layer : public ::xml_schema::type
{
public:
	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// name
	//
	typedef ::xml_schema::string name_type;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_type&
		name() const;

	name_type&
		name();

	void
		name(const name_type& x);

	void
		name(::std::auto_ptr< name_type > p);

	// image
	//
	typedef ::xml_schema::integer image_type;
	typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

	const image_type&
		image() const;

	image_type&
		image();

	void
		image(const image_type& x);

	// x
	//
	typedef ::xml_schema::integer x_type;
	typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

	const x_type&
		x() const;

	x_type&
		x();

	void
		x(const x_type& x);

	// y
	//
	typedef ::xml_schema::integer y_type;
	typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

	const y_type&
		y() const;

	y_type&
		y();

	void
		y(const y_type& x);

	// Constructors.
	//
	ent_layer(const id_type&,
		const name_type&,
		const image_type&,
		const x_type&,
		const y_type&);

	ent_layer(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_layer(const ent_layer& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_layer*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_layer&
		operator= (const ent_layer& x);

	virtual
		~ent_layer();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< name_type > name_;
	::xsd::cxx::tree::one< image_type > image_;
	::xsd::cxx::tree::one< x_type > x_;
	::xsd::cxx::tree::one< y_type > y_;
};

class ent_animation : public ::xml_schema::type
{
public:
	// replace
	//
	typedef ::replace replace_type;
	typedef ::xsd::cxx::tree::sequence< replace_type > replace_sequence;
	typedef replace_sequence::iterator replace_iterator;
	typedef replace_sequence::const_iterator replace_const_iterator;
	typedef ::xsd::cxx::tree::traits< replace_type, char > replace_traits;

	const replace_sequence&
		replace() const;

	replace_sequence&
		replace();

	void
		replace(const replace_sequence& s);

	// frame
	//
	typedef ::frame frame_type;
	typedef ::xsd::cxx::tree::sequence< frame_type > frame_sequence;
	typedef frame_sequence::iterator frame_iterator;
	typedef frame_sequence::const_iterator frame_const_iterator;
	typedef ::xsd::cxx::tree::traits< frame_type, char > frame_traits;

	const frame_sequence&
		frame() const;

	frame_sequence&
		frame();

	void
		frame(const frame_sequence& s);

	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// name
	//
	typedef ::xml_schema::string name_type;
	typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

	const name_type&
		name() const;

	name_type&
		name();

	void
		name(const name_type& x);

	void
		name(::std::auto_ptr< name_type > p);

	// startstate
	//
	typedef ::xml_schema::integer startstate_type;
	typedef ::xsd::cxx::tree::traits< startstate_type, char > startstate_traits;

	const startstate_type&
		startstate() const;

	startstate_type&
		startstate();

	void
		startstate(const startstate_type& x);

	// endstate
	//
	typedef ::xml_schema::integer endstate_type;
	typedef ::xsd::cxx::tree::traits< endstate_type, char > endstate_traits;

	const endstate_type&
		endstate() const;

	endstate_type&
		endstate();

	void
		endstate(const endstate_type& x);

	// frames
	//
	typedef ::xml_schema::integer frames_type;
	typedef ::xsd::cxx::tree::traits< frames_type, char > frames_traits;

	const frames_type&
		frames() const;

	frames_type&
		frames();

	void
		frames(const frames_type& x);

	// speedMultiplier
	//
	typedef ::xml_schema::integer speedMultiplier_type;
	typedef ::xsd::cxx::tree::traits< speedMultiplier_type, char > speedMultiplier_traits;

	const speedMultiplier_type&
		speedMultiplier() const;

	speedMultiplier_type&
		speedMultiplier();

	void
		speedMultiplier(const speedMultiplier_type& x);

	// Constructors.
	//
	ent_animation(const id_type&,
		const name_type&,
		const startstate_type&,
		const endstate_type&,
		const frames_type&,
		const speedMultiplier_type&);

	ent_animation(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	ent_animation(const ent_animation& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual ent_animation*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	ent_animation&
		operator= (const ent_animation& x);

	virtual
		~ent_animation();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	replace_sequence replace_;
	frame_sequence frame_;
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< name_type > name_;
	::xsd::cxx::tree::one< startstate_type > startstate_;
	::xsd::cxx::tree::one< endstate_type > endstate_;
	::xsd::cxx::tree::one< frames_type > frames_;
	::xsd::cxx::tree::one< speedMultiplier_type > speedMultiplier_;
};

class replace : public ::xml_schema::type
{
public:
	// layer
	//
	typedef ::xml_schema::integer layer_type;
	typedef ::xsd::cxx::tree::traits< layer_type, char > layer_traits;

	const layer_type&
		layer() const;

	layer_type&
		layer();

	void
		layer(const layer_type& x);

	// image
	//
	typedef ::xml_schema::integer image_type;
	typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

	const image_type&
		image() const;

	image_type&
		image();

	void
		image(const image_type& x);

	// x
	//
	typedef ::xml_schema::integer x_type;
	typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

	const x_type&
		x() const;

	x_type&
		x();

	void
		x(const x_type& x);

	// y
	//
	typedef ::xml_schema::integer y_type;
	typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

	const y_type&
		y() const;

	y_type&
		y();

	void
		y(const y_type& x);

	// Constructors.
	//
	replace(const layer_type&,
		const image_type&,
		const x_type&,
		const y_type&);

	replace(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	replace(const replace& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual replace*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	replace&
		operator= (const replace& x);

	virtual
		~replace();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< layer_type > layer_;
	::xsd::cxx::tree::one< image_type > image_;
	::xsd::cxx::tree::one< x_type > x_;
	::xsd::cxx::tree::one< y_type > y_;
};

class frame : public ::xml_schema::type
{
public:
	// id
	//
	typedef ::xml_schema::integer id_type;
	typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

	const id_type&
		id() const;

	id_type&
		id();

	void
		id(const id_type& x);

	// milliseconds
	//
	typedef ::xml_schema::integer milliseconds_type;
	typedef ::xsd::cxx::tree::traits< milliseconds_type, char > milliseconds_traits;

	const milliseconds_type&
		milliseconds() const;

	milliseconds_type&
		milliseconds();

	void
		milliseconds(const milliseconds_type& x);

	// Constructors.
	//
	frame(const id_type&,
		const milliseconds_type&);

	frame(const ::xercesc::DOMElement& e,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	frame(const frame& x,
		::xml_schema::flags f = 0,
		::xml_schema::container* c = 0);

	virtual frame*
		_clone(::xml_schema::flags f = 0,
			::xml_schema::container* c = 0) const;

	frame&
		operator= (const frame& x);

	virtual
		~frame();

	// Implementation.
	//
protected:
	void
		parse(::xsd::cxx::xml::dom::parser< char >&,
			::xml_schema::flags);

protected:
	::xsd::cxx::tree::one< id_type > id_;
	::xsd::cxx::tree::one< milliseconds_type > milliseconds_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::c_entity >
c_entity_(const ::std::string& uri,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(const ::std::string& uri,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(const ::std::string& uri,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse std::istream.
//

::std::auto_ptr< ::c_entity >
c_entity_(::std::istream& is,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::std::istream& is,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::std::istream& is,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::std::istream& is,
	const ::std::string& id,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::std::istream& is,
	const ::std::string& id,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::std::istream& is,
	const ::std::string& id,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::c_entity >
c_entity_(::xercesc::InputSource& is,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::xercesc::InputSource& is,
	::xml_schema::error_handler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::xercesc::InputSource& is,
	::xercesc::DOMErrorHandler& eh,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::c_entity >
c_entity_(const ::xercesc::DOMDocument& d,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::c_entity >
c_entity_(::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
	::xml_schema::flags f = 0,
	const ::xml_schema::properties& p = ::xml_schema::properties());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ENTITY_HXX
